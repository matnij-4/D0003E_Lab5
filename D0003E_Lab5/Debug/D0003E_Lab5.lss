
D0003E_Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00001f44  00001fd8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f44  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000357  00800132  00800132  0000200a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000200a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000203c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  0000207c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028b9  00000000  00000000  0000229c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc8  00000000  00000000  00004b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014cf  00000000  00000000  00005b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000b70  00000000  00000000  00006fec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009cb  00000000  00000000  00007b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000283b  00000000  00000000  00008527  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  0000ad62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 a0 03 	jmp	0x740	; 0x740 <__vector_1>
       8:	0c 94 0c 04 	jmp	0x818	; 0x818 <__vector_2>
       c:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__vector_3>
      10:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__vector_4>
      14:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 27 0c 	jmp	0x184e	; 0x184e <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 d5 0b 	jmp	0x17aa	; 0x17aa <__vector_9>
      28:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__vector_10>
      2c:	0c 94 28 06 	jmp	0xc50	; 0xc50 <__vector_11>
      30:	0c 94 94 06 	jmp	0xd28	; 0xd28 <__vector_12>
      34:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__vector_13>
      38:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <__vector_14>
      3c:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__vector_15>
      40:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__vector_16>
      44:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__vector_17>
      48:	0c 94 1c 09 	jmp	0x1238	; 0x1238 <__vector_18>
      4c:	0c 94 88 09 	jmp	0x1310	; 0x1310 <__vector_19>
      50:	0c 94 f4 09 	jmp	0x13e8	; 0x13e8 <__vector_20>
      54:	0c 94 60 0a 	jmp	0x14c0	; 0x14c0 <__vector_21>
      58:	0c 94 cc 0a 	jmp	0x1598	; 0x1598 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e4 e4       	ldi	r30, 0x44	; 68
      70:	ff e1       	ldi	r31, 0x1F	; 31
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a2 33       	cpi	r26, 0x32	; 50
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a2 e3       	ldi	r26, 0x32	; 50
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a9 38       	cpi	r26, 0x89	; 137
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 c4 02 	call	0x588	; 0x588 <main>
      92:	0c 94 a0 0f 	jmp	0x1f40	; 0x1f40 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <trafficLightController>:
#define REDGREEN 0x6



//Logic for the Lights.
void trafficLightController(Controller* self, int arg){
      9a:	cf 92       	push	r12
      9c:	df 92       	push	r13
      9e:	ef 92       	push	r14
      a0:	ff 92       	push	r15
      a2:	0f 93       	push	r16
      a4:	1f 93       	push	r17
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	ec 01       	movw	r28, r24
	
	//No Cars.
	if((self->queueNorth == 0) && (self->queueSouth == 0)){
      ac:	88 85       	ldd	r24, Y+8	; 0x08
      ae:	99 85       	ldd	r25, Y+9	; 0x09
      b0:	00 97       	sbiw	r24, 0x00	; 0
      b2:	09 f0       	breq	.+2      	; 0xb6 <trafficLightController+0x1c>
      b4:	86 c0       	rjmp	.+268    	; 0x1c2 <trafficLightController+0x128>
      b6:	8e 81       	ldd	r24, Y+6	; 0x06
      b8:	9f 81       	ldd	r25, Y+7	; 0x07
      ba:	89 2b       	or	r24, r25
      bc:	81 f5       	brne	.+96     	; 0x11e <trafficLightController+0x84>
		ASYNC(self, sendSignal, REDRED);
      be:	0f 2e       	mov	r0, r31
      c0:	fa e0       	ldi	r31, 0x0A	; 10
      c2:	cf 2e       	mov	r12, r31
      c4:	d1 2c       	mov	r13, r1
      c6:	f0 2d       	mov	r31, r0
      c8:	0f 2e       	mov	r0, r31
      ca:	ff ee       	ldi	r31, 0xEF	; 239
      cc:	ef 2e       	mov	r14, r31
      ce:	f0 e0       	ldi	r31, 0x00	; 0
      d0:	ff 2e       	mov	r15, r31
      d2:	f0 2d       	mov	r31, r0
      d4:	8e 01       	movw	r16, r28
      d6:	20 e0       	ldi	r18, 0x00	; 0
      d8:	30 e0       	ldi	r19, 0x00	; 0
      da:	a9 01       	movw	r20, r18
      dc:	60 e0       	ldi	r22, 0x00	; 0
      de:	70 e0       	ldi	r23, 0x00	; 0
      e0:	cb 01       	movw	r24, r22
      e2:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <async>
		self->carsPassed = 0;
      e6:	1d 86       	std	Y+13, r1	; 0x0d
      e8:	1c 86       	std	Y+12, r1	; 0x0c
      ea:	70 c0       	rjmp	.+224    	; 0x1cc <trafficLightController+0x132>
	}
	
	//Cars only North
	else if((self->queueNorth > 0) && (self->queueSouth == 0)){
      ec:	8e 81       	ldd	r24, Y+6	; 0x06
      ee:	9f 81       	ldd	r25, Y+7	; 0x07
      f0:	89 2b       	or	r24, r25
      f2:	79 f5       	brne	.+94     	; 0x152 <trafficLightController+0xb8>
		ASYNC(self, sendSignal, GREENRED);
      f4:	0f 2e       	mov	r0, r31
      f6:	f9 e0       	ldi	r31, 0x09	; 9
      f8:	cf 2e       	mov	r12, r31
      fa:	d1 2c       	mov	r13, r1
      fc:	f0 2d       	mov	r31, r0
      fe:	0f 2e       	mov	r0, r31
     100:	ff ee       	ldi	r31, 0xEF	; 239
     102:	ef 2e       	mov	r14, r31
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	ff 2e       	mov	r15, r31
     108:	f0 2d       	mov	r31, r0
     10a:	8e 01       	movw	r16, r28
     10c:	20 e0       	ldi	r18, 0x00	; 0
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	a9 01       	movw	r20, r18
     112:	60 e0       	ldi	r22, 0x00	; 0
     114:	70 e0       	ldi	r23, 0x00	; 0
     116:	cb 01       	movw	r24, r22
     118:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <async>
     11c:	57 c0       	rjmp	.+174    	; 0x1cc <trafficLightController+0x132>
	}
	
	//Cars only South.
	else if((self->queueNorth == 0) && (self->queueSouth > 0)){
     11e:	8e 81       	ldd	r24, Y+6	; 0x06
     120:	9f 81       	ldd	r25, Y+7	; 0x07
     122:	18 16       	cp	r1, r24
     124:	19 06       	cpc	r1, r25
     126:	ac f4       	brge	.+42     	; 0x152 <trafficLightController+0xb8>
		ASYNC(self, sendSignal, REDGREEN);
     128:	0f 2e       	mov	r0, r31
     12a:	f6 e0       	ldi	r31, 0x06	; 6
     12c:	cf 2e       	mov	r12, r31
     12e:	d1 2c       	mov	r13, r1
     130:	f0 2d       	mov	r31, r0
     132:	0f 2e       	mov	r0, r31
     134:	ff ee       	ldi	r31, 0xEF	; 239
     136:	ef 2e       	mov	r14, r31
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	ff 2e       	mov	r15, r31
     13c:	f0 2d       	mov	r31, r0
     13e:	8e 01       	movw	r16, r28
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	a9 01       	movw	r20, r18
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	70 e0       	ldi	r23, 0x00	; 0
     14a:	cb 01       	movw	r24, r22
     14c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <async>
     150:	3d c0       	rjmp	.+122    	; 0x1cc <trafficLightController+0x132>
	}
	
	
	//Do not starve South.
	else if(self->carsPassed > 4 &&  self->northWasOn){
     152:	8c 85       	ldd	r24, Y+12	; 0x0c
     154:	9d 85       	ldd	r25, Y+13	; 0x0d
     156:	05 97       	sbiw	r24, 0x05	; 5
     158:	cc f1       	brlt	.+114    	; 0x1cc <trafficLightController+0x132>
     15a:	8e 85       	ldd	r24, Y+14	; 0x0e
     15c:	88 23       	and	r24, r24
     15e:	c1 f0       	breq	.+48     	; 0x190 <trafficLightController+0xf6>
		self->northWasOn = false;
     160:	1e 86       	std	Y+14, r1	; 0x0e
		ASYNC(self, sendSignal, REDGREEN);
     162:	0f 2e       	mov	r0, r31
     164:	f6 e0       	ldi	r31, 0x06	; 6
     166:	cf 2e       	mov	r12, r31
     168:	d1 2c       	mov	r13, r1
     16a:	f0 2d       	mov	r31, r0
     16c:	0f 2e       	mov	r0, r31
     16e:	ff ee       	ldi	r31, 0xEF	; 239
     170:	ef 2e       	mov	r14, r31
     172:	f0 e0       	ldi	r31, 0x00	; 0
     174:	ff 2e       	mov	r15, r31
     176:	f0 2d       	mov	r31, r0
     178:	8e 01       	movw	r16, r28
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	a9 01       	movw	r20, r18
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	70 e0       	ldi	r23, 0x00	; 0
     184:	cb 01       	movw	r24, r22
     186:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <async>
		self->carsPassed = 0;
     18a:	1d 86       	std	Y+13, r1	; 0x0d
     18c:	1c 86       	std	Y+12, r1	; 0x0c
     18e:	1e c0       	rjmp	.+60     	; 0x1cc <trafficLightController+0x132>
	}
	
	//Do not starve North.
	else if(self->carsPassed > 4 && !(self->northWasOn)){
		self->northWasOn = true;
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	8e 87       	std	Y+14, r24	; 0x0e
		ASYNC(self, sendSignal, GREENRED);
     194:	0f 2e       	mov	r0, r31
     196:	f9 e0       	ldi	r31, 0x09	; 9
     198:	cf 2e       	mov	r12, r31
     19a:	d1 2c       	mov	r13, r1
     19c:	f0 2d       	mov	r31, r0
     19e:	0f 2e       	mov	r0, r31
     1a0:	ff ee       	ldi	r31, 0xEF	; 239
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	8e 01       	movw	r16, r28
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	a9 01       	movw	r20, r18
     1b2:	60 e0       	ldi	r22, 0x00	; 0
     1b4:	70 e0       	ldi	r23, 0x00	; 0
     1b6:	cb 01       	movw	r24, r22
     1b8:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <async>
		self->carsPassed = 0;
     1bc:	1d 86       	std	Y+13, r1	; 0x0d
     1be:	1c 86       	std	Y+12, r1	; 0x0c
	}
}
     1c0:	05 c0       	rjmp	.+10     	; 0x1cc <trafficLightController+0x132>
		ASYNC(self, sendSignal, REDRED);
		self->carsPassed = 0;
	}
	
	//Cars only North
	else if((self->queueNorth > 0) && (self->queueSouth == 0)){
     1c2:	18 16       	cp	r1, r24
     1c4:	19 06       	cpc	r1, r25
     1c6:	0c f4       	brge	.+2      	; 0x1ca <trafficLightController+0x130>
     1c8:	91 cf       	rjmp	.-222    	; 0xec <trafficLightController+0x52>
     1ca:	c3 cf       	rjmp	.-122    	; 0x152 <trafficLightController+0xb8>
	else if(self->carsPassed > 4 && !(self->northWasOn)){
		self->northWasOn = true;
		ASYNC(self, sendSignal, GREENRED);
		self->carsPassed = 0;
	}
}
     1cc:	df 91       	pop	r29
     1ce:	cf 91       	pop	r28
     1d0:	1f 91       	pop	r17
     1d2:	0f 91       	pop	r16
     1d4:	ff 90       	pop	r15
     1d6:	ef 90       	pop	r14
     1d8:	df 90       	pop	r13
     1da:	cf 90       	pop	r12
     1dc:	08 95       	ret

000001de <sendSignal>:


//Send signals to SYM.
void sendSignal(Controller* self, uint8_t sigdata){
     1de:	cf 92       	push	r12
     1e0:	df 92       	push	r13
     1e2:	ef 92       	push	r14
     1e4:	ff 92       	push	r15
     1e6:	0f 93       	push	r16
     1e8:	1f 93       	push	r17
     1ea:	cf 93       	push	r28
     1ec:	c6 2f       	mov	r28, r22
	
	//Update Stoplight.
	ASYNC(self->lcd, northStopLight, sigdata);
     1ee:	c6 2e       	mov	r12, r22
     1f0:	d1 2c       	mov	r13, r1
     1f2:	fc 01       	movw	r30, r24
     1f4:	04 81       	ldd	r16, Z+4	; 0x04
     1f6:	15 81       	ldd	r17, Z+5	; 0x05
     1f8:	0f 2e       	mov	r0, r31
     1fa:	f5 e9       	ldi	r31, 0x95	; 149
     1fc:	ef 2e       	mov	r14, r31
     1fe:	f2 e0       	ldi	r31, 0x02	; 2
     200:	ff 2e       	mov	r15, r31
     202:	f0 2d       	mov	r31, r0
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	a9 01       	movw	r20, r18
     20a:	60 e0       	ldi	r22, 0x00	; 0
     20c:	70 e0       	ldi	r23, 0x00	; 0
     20e:	cb 01       	movw	r24, r22
     210:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <async>
	
	//Send to Sym.
	UDR0 = sigdata;
     214:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
}
     218:	cf 91       	pop	r28
     21a:	1f 91       	pop	r17
     21c:	0f 91       	pop	r16
     21e:	ff 90       	pop	r15
     220:	ef 90       	pop	r14
     222:	df 90       	pop	r13
     224:	cf 90       	pop	r12
     226:	08 95       	ret

00000228 <addToBridge>:

void addToBridge(Controller* self, int add){
     228:	cf 92       	push	r12
     22a:	df 92       	push	r13
     22c:	ef 92       	push	r14
     22e:	ff 92       	push	r15
     230:	0f 93       	push	r16
     232:	1f 93       	push	r17
	
	
	//Add Car to the bridge.
	if(add == 1){
     234:	61 30       	cpi	r22, 0x01	; 1
     236:	71 05       	cpc	r23, r1
     238:	c9 f4       	brne	.+50     	; 0x26c <addToBridge+0x44>
     23a:	8c 01       	movw	r16, r24
		self->carsOn++;
     23c:	fc 01       	movw	r30, r24
     23e:	82 85       	ldd	r24, Z+10	; 0x0a
     240:	93 85       	ldd	r25, Z+11	; 0x0b
     242:	01 96       	adiw	r24, 0x01	; 1
     244:	93 87       	std	Z+11, r25	; 0x0b
     246:	82 87       	std	Z+10, r24	; 0x0a
		AFTER(MSEC(5), self, addToBridge, 0);
     248:	c1 2c       	mov	r12, r1
     24a:	d1 2c       	mov	r13, r1
     24c:	0f 2e       	mov	r0, r31
     24e:	f4 e1       	ldi	r31, 0x14	; 20
     250:	ef 2e       	mov	r14, r31
     252:	f1 e0       	ldi	r31, 0x01	; 1
     254:	ff 2e       	mov	r15, r31
     256:	f0 2d       	mov	r31, r0
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	a9 01       	movw	r20, r18
     25e:	6c e9       	ldi	r22, 0x9C	; 156
     260:	70 e0       	ldi	r23, 0x00	; 0
     262:	80 e0       	ldi	r24, 0x00	; 0
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <async>
     26a:	09 c0       	rjmp	.+18     	; 0x27e <addToBridge+0x56>
	}
	
	//Remove the Cars from bridge.
	else if(add == 0){
     26c:	67 2b       	or	r22, r23
     26e:	39 f4       	brne	.+14     	; 0x27e <addToBridge+0x56>
		self->carsOn--;
     270:	fc 01       	movw	r30, r24
     272:	22 85       	ldd	r18, Z+10	; 0x0a
     274:	33 85       	ldd	r19, Z+11	; 0x0b
     276:	21 50       	subi	r18, 0x01	; 1
     278:	31 09       	sbc	r19, r1
     27a:	33 87       	std	Z+11, r19	; 0x0b
     27c:	22 87       	std	Z+10, r18	; 0x0a
	}
	
	
}
     27e:	1f 91       	pop	r17
     280:	0f 91       	pop	r16
     282:	ff 90       	pop	r15
     284:	ef 90       	pop	r14
     286:	df 90       	pop	r13
     288:	cf 90       	pop	r12
     28a:	08 95       	ret

0000028c <bitParser>:

//Pars the bits and reads them.
void bitParser(Controller* self, uint8_t bits){
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	ec 01       	movw	r28, r24
	
	//Northbound Car Arrival.
	if((bits & 1 ) == 1){
     29e:	60 ff       	sbrs	r22, 0
     2a0:	17 c0       	rjmp	.+46     	; 0x2d0 <bitParser+0x44>
		ASYNC(self, trafficLightController, 0);
     2a2:	c1 2c       	mov	r12, r1
     2a4:	d1 2c       	mov	r13, r1
     2a6:	0f 2e       	mov	r0, r31
     2a8:	fd e4       	ldi	r31, 0x4D	; 77
     2aa:	ef 2e       	mov	r14, r31
     2ac:	f0 e0       	ldi	r31, 0x00	; 0
     2ae:	ff 2e       	mov	r15, r31
     2b0:	f0 2d       	mov	r31, r0
     2b2:	8c 01       	movw	r16, r24
     2b4:	20 e0       	ldi	r18, 0x00	; 0
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	a9 01       	movw	r20, r18
     2ba:	60 e0       	ldi	r22, 0x00	; 0
     2bc:	70 e0       	ldi	r23, 0x00	; 0
     2be:	cb 01       	movw	r24, r22
     2c0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <async>
		self->queueNorth++;
     2c4:	88 85       	ldd	r24, Y+8	; 0x08
     2c6:	99 85       	ldd	r25, Y+9	; 0x09
     2c8:	01 96       	adiw	r24, 0x01	; 1
     2ca:	99 87       	std	Y+9, r25	; 0x09
     2cc:	88 87       	std	Y+8, r24	; 0x08
     2ce:	7d c0       	rjmp	.+250    	; 0x3ca <bitParser+0x13e>
	}
	
	//North car enters the bridge.
	else if(((bits >> 1) & 1) == 1){
     2d0:	61 ff       	sbrs	r22, 1
     2d2:	31 c0       	rjmp	.+98     	; 0x336 <bitParser+0xaa>
		if(self->queueNorth > 0){
     2d4:	88 85       	ldd	r24, Y+8	; 0x08
     2d6:	99 85       	ldd	r25, Y+9	; 0x09
     2d8:	18 16       	cp	r1, r24
     2da:	19 06       	cpc	r1, r25
     2dc:	0c f0       	brlt	.+2      	; 0x2e0 <bitParser+0x54>
     2de:	75 c0       	rjmp	.+234    	; 0x3ca <bitParser+0x13e>
			self->queueNorth--;
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	99 87       	std	Y+9, r25	; 0x09
     2e4:	88 87       	std	Y+8, r24	; 0x08
			ASYNC(self, trafficLightController, 0);
     2e6:	c1 2c       	mov	r12, r1
     2e8:	d1 2c       	mov	r13, r1
     2ea:	0f 2e       	mov	r0, r31
     2ec:	fd e4       	ldi	r31, 0x4D	; 77
     2ee:	ef 2e       	mov	r14, r31
     2f0:	f0 e0       	ldi	r31, 0x00	; 0
     2f2:	ff 2e       	mov	r15, r31
     2f4:	f0 2d       	mov	r31, r0
     2f6:	8e 01       	movw	r16, r28
     2f8:	20 e0       	ldi	r18, 0x00	; 0
     2fa:	30 e0       	ldi	r19, 0x00	; 0
     2fc:	a9 01       	movw	r20, r18
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	cb 01       	movw	r24, r22
     304:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <async>
			ASYNC(self, addToBridge, 1);
     308:	cc 24       	eor	r12, r12
     30a:	c3 94       	inc	r12
     30c:	d1 2c       	mov	r13, r1
     30e:	0f 2e       	mov	r0, r31
     310:	f4 e1       	ldi	r31, 0x14	; 20
     312:	ef 2e       	mov	r14, r31
     314:	f1 e0       	ldi	r31, 0x01	; 1
     316:	ff 2e       	mov	r15, r31
     318:	f0 2d       	mov	r31, r0
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	a9 01       	movw	r20, r18
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	cb 01       	movw	r24, r22
     326:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <async>
			
			//Adds car to passed.
			self->carsPassed++;
     32a:	8c 85       	ldd	r24, Y+12	; 0x0c
     32c:	9d 85       	ldd	r25, Y+13	; 0x0d
     32e:	01 96       	adiw	r24, 0x01	; 1
     330:	9d 87       	std	Y+13, r25	; 0x0d
     332:	8c 87       	std	Y+12, r24	; 0x0c
     334:	4a c0       	rjmp	.+148    	; 0x3ca <bitParser+0x13e>
		}
		
	}
	
	//Southbound Car Arrival.
	else if(((bits >> 2) & 1) == 1){
     336:	62 ff       	sbrs	r22, 2
     338:	17 c0       	rjmp	.+46     	; 0x368 <bitParser+0xdc>
		ASYNC(self, trafficLightController, 0);
     33a:	c1 2c       	mov	r12, r1
     33c:	d1 2c       	mov	r13, r1
     33e:	0f 2e       	mov	r0, r31
     340:	fd e4       	ldi	r31, 0x4D	; 77
     342:	ef 2e       	mov	r14, r31
     344:	f0 e0       	ldi	r31, 0x00	; 0
     346:	ff 2e       	mov	r15, r31
     348:	f0 2d       	mov	r31, r0
     34a:	8c 01       	movw	r16, r24
     34c:	20 e0       	ldi	r18, 0x00	; 0
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	a9 01       	movw	r20, r18
     352:	60 e0       	ldi	r22, 0x00	; 0
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	cb 01       	movw	r24, r22
     358:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <async>
		self->queueSouth++;
     35c:	8e 81       	ldd	r24, Y+6	; 0x06
     35e:	9f 81       	ldd	r25, Y+7	; 0x07
     360:	01 96       	adiw	r24, 0x01	; 1
     362:	9f 83       	std	Y+7, r25	; 0x07
     364:	8e 83       	std	Y+6, r24	; 0x06
     366:	31 c0       	rjmp	.+98     	; 0x3ca <bitParser+0x13e>
	}
	
	//South car enters the bridge.
	else if(((bits >> 3) & 1) == 1){
     368:	63 ff       	sbrs	r22, 3
     36a:	2f c0       	rjmp	.+94     	; 0x3ca <bitParser+0x13e>
		if(self->queueSouth > 0){
     36c:	8e 81       	ldd	r24, Y+6	; 0x06
     36e:	9f 81       	ldd	r25, Y+7	; 0x07
     370:	18 16       	cp	r1, r24
     372:	19 06       	cpc	r1, r25
     374:	54 f5       	brge	.+84     	; 0x3ca <bitParser+0x13e>
			self->queueSouth--;
     376:	01 97       	sbiw	r24, 0x01	; 1
     378:	9f 83       	std	Y+7, r25	; 0x07
     37a:	8e 83       	std	Y+6, r24	; 0x06
			ASYNC(self, trafficLightController, 0);
     37c:	c1 2c       	mov	r12, r1
     37e:	d1 2c       	mov	r13, r1
     380:	0f 2e       	mov	r0, r31
     382:	fd e4       	ldi	r31, 0x4D	; 77
     384:	ef 2e       	mov	r14, r31
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	ff 2e       	mov	r15, r31
     38a:	f0 2d       	mov	r31, r0
     38c:	8e 01       	movw	r16, r28
     38e:	20 e0       	ldi	r18, 0x00	; 0
     390:	30 e0       	ldi	r19, 0x00	; 0
     392:	a9 01       	movw	r20, r18
     394:	60 e0       	ldi	r22, 0x00	; 0
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	cb 01       	movw	r24, r22
     39a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <async>
			ASYNC(self, addToBridge, 1);
     39e:	cc 24       	eor	r12, r12
     3a0:	c3 94       	inc	r12
     3a2:	d1 2c       	mov	r13, r1
     3a4:	0f 2e       	mov	r0, r31
     3a6:	f4 e1       	ldi	r31, 0x14	; 20
     3a8:	ef 2e       	mov	r14, r31
     3aa:	f1 e0       	ldi	r31, 0x01	; 1
     3ac:	ff 2e       	mov	r15, r31
     3ae:	f0 2d       	mov	r31, r0
     3b0:	20 e0       	ldi	r18, 0x00	; 0
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	a9 01       	movw	r20, r18
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	70 e0       	ldi	r23, 0x00	; 0
     3ba:	cb 01       	movw	r24, r22
     3bc:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <async>
			
			//Adds car to passed.
			self->carsPassed++;
     3c0:	8c 85       	ldd	r24, Y+12	; 0x0c
     3c2:	9d 85       	ldd	r25, Y+13	; 0x0d
     3c4:	01 96       	adiw	r24, 0x01	; 1
     3c6:	9d 87       	std	Y+13, r25	; 0x0d
     3c8:	8c 87       	std	Y+12, r24	; 0x0c
		}
		
	}
	
}
     3ca:	df 91       	pop	r29
     3cc:	cf 91       	pop	r28
     3ce:	1f 91       	pop	r17
     3d0:	0f 91       	pop	r16
     3d2:	ff 90       	pop	r15
     3d4:	ef 90       	pop	r14
     3d6:	df 90       	pop	r13
     3d8:	cf 90       	pop	r12
     3da:	08 95       	ret

000003dc <receivedUSART>:
 */ 

#include "InterruptSignalHandler.h"


void receivedUSART(InterruptSignalHandler* self){
     3dc:	cf 92       	push	r12
     3de:	df 92       	push	r13
     3e0:	ef 92       	push	r14
     3e2:	ff 92       	push	r15
     3e4:	0f 93       	push	r16
     3e6:	1f 93       	push	r17
	uint8_t bits = UDR0;
     3e8:	c0 90 c6 00 	lds	r12, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	ASYNC(self->controller, bitParser, bits);
     3ec:	d1 2c       	mov	r13, r1
     3ee:	fc 01       	movw	r30, r24
     3f0:	04 81       	ldd	r16, Z+4	; 0x04
     3f2:	15 81       	ldd	r17, Z+5	; 0x05
     3f4:	0f 2e       	mov	r0, r31
     3f6:	f6 e4       	ldi	r31, 0x46	; 70
     3f8:	ef 2e       	mov	r14, r31
     3fa:	f1 e0       	ldi	r31, 0x01	; 1
     3fc:	ff 2e       	mov	r15, r31
     3fe:	f0 2d       	mov	r31, r0
     400:	20 e0       	ldi	r18, 0x00	; 0
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	a9 01       	movw	r20, r18
     406:	60 e0       	ldi	r22, 0x00	; 0
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	cb 01       	movw	r24, r22
     40c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <async>
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	ff 90       	pop	r15
     416:	ef 90       	pop	r14
     418:	df 90       	pop	r13
     41a:	cf 90       	pop	r12
     41c:	08 95       	ret

0000041e <writeChar>:
}


//Print the red light at South.
void southStopLight(LCD* self, int cars){
	printAt(cars, 0);
     41e:	cf 93       	push	r28
     420:	df 93       	push	r29
     422:	cd b7       	in	r28, 0x3d	; 61
     424:	de b7       	in	r29, 0x3e	; 62
     426:	64 97       	sbiw	r28, 0x14	; 20
     428:	0f b6       	in	r0, 0x3f	; 63
     42a:	f8 94       	cli
     42c:	de bf       	out	0x3e, r29	; 62
     42e:	0f be       	out	0x3f, r0	; 63
     430:	cd bf       	out	0x3d, r28	; 61
     432:	94 e1       	ldi	r25, 0x14	; 20
     434:	ed e1       	ldi	r30, 0x1D	; 29
     436:	f1 e0       	ldi	r31, 0x01	; 1
     438:	de 01       	movw	r26, r28
     43a:	11 96       	adiw	r26, 0x01	; 1
     43c:	01 90       	ld	r0, Z+
     43e:	0d 92       	st	X+, r0
     440:	9a 95       	dec	r25
     442:	e1 f7       	brne	.-8      	; 0x43c <writeChar+0x1e>
     444:	66 30       	cpi	r22, 0x06	; 6
     446:	71 05       	cpc	r23, r1
     448:	68 f5       	brcc	.+90     	; 0x4a4 <writeChar+0x86>
     44a:	e8 2f       	mov	r30, r24
     44c:	f0 e0       	ldi	r31, 0x00	; 0
     44e:	f0 97       	sbiw	r30, 0x30	; 48
     450:	ee 0f       	add	r30, r30
     452:	ff 1f       	adc	r31, r31
     454:	ec 0f       	add	r30, r28
     456:	fd 1f       	adc	r31, r29
     458:	21 81       	ldd	r18, Z+1	; 0x01
     45a:	32 81       	ldd	r19, Z+2	; 0x02
     45c:	fb 01       	movw	r30, r22
     45e:	f5 95       	asr	r31
     460:	e7 95       	ror	r30
     462:	e4 51       	subi	r30, 0x14	; 20
     464:	ff 4f       	sbci	r31, 0xFF	; 255
     466:	db 01       	movw	r26, r22
     468:	a1 70       	andi	r26, 0x01	; 1
     46a:	bb 27       	eor	r27, r27
     46c:	60 ff       	sbrs	r22, 0
     46e:	02 c0       	rjmp	.+4      	; 0x474 <writeChar+0x56>
     470:	6f e0       	ldi	r22, 0x0F	; 15
     472:	01 c0       	rjmp	.+2      	; 0x476 <writeChar+0x58>
     474:	60 ef       	ldi	r22, 0xF0	; 240
     476:	af 01       	movw	r20, r30
     478:	4c 5e       	subi	r20, 0xEC	; 236
     47a:	5f 4f       	sbci	r21, 0xFF	; 255
     47c:	82 2f       	mov	r24, r18
     47e:	8f 70       	andi	r24, 0x0F	; 15
     480:	32 95       	swap	r19
     482:	22 95       	swap	r18
     484:	2f 70       	andi	r18, 0x0F	; 15
     486:	23 27       	eor	r18, r19
     488:	3f 70       	andi	r19, 0x0F	; 15
     48a:	23 27       	eor	r18, r19
     48c:	10 97       	sbiw	r26, 0x00	; 0
     48e:	11 f0       	breq	.+4      	; 0x494 <writeChar+0x76>
     490:	82 95       	swap	r24
     492:	80 7f       	andi	r24, 0xF0	; 240
     494:	90 81       	ld	r25, Z
     496:	96 23       	and	r25, r22
     498:	89 2b       	or	r24, r25
     49a:	80 83       	st	Z, r24
     49c:	35 96       	adiw	r30, 0x05	; 5
     49e:	4e 17       	cp	r20, r30
     4a0:	5f 07       	cpc	r21, r31
     4a2:	61 f7       	brne	.-40     	; 0x47c <writeChar+0x5e>
     4a4:	64 96       	adiw	r28, 0x14	; 20
     4a6:	0f b6       	in	r0, 0x3f	; 63
     4a8:	f8 94       	cli
     4aa:	de bf       	out	0x3e, r29	; 62
     4ac:	0f be       	out	0x3f, r0	; 63
     4ae:	cd bf       	out	0x3d, r28	; 61
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	08 95       	ret

000004b6 <printAt>:
     4b6:	8f 92       	push	r8
     4b8:	9f 92       	push	r9
     4ba:	af 92       	push	r10
     4bc:	bf 92       	push	r11
     4be:	cf 92       	push	r12
     4c0:	df 92       	push	r13
     4c2:	ef 92       	push	r14
     4c4:	ff 92       	push	r15
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	4b 01       	movw	r8, r22
     4cc:	5c 01       	movw	r10, r24
     4ce:	ea 01       	movw	r28, r20
     4d0:	24 e6       	ldi	r18, 0x64	; 100
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	40 e0       	ldi	r20, 0x00	; 0
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__divmodsi4>
     4dc:	0f 2e       	mov	r0, r31
     4de:	fa e0       	ldi	r31, 0x0A	; 10
     4e0:	cf 2e       	mov	r12, r31
     4e2:	d1 2c       	mov	r13, r1
     4e4:	e1 2c       	mov	r14, r1
     4e6:	f1 2c       	mov	r15, r1
     4e8:	f0 2d       	mov	r31, r0
     4ea:	a7 01       	movw	r20, r14
     4ec:	96 01       	movw	r18, r12
     4ee:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__divmodsi4>
     4f2:	be 01       	movw	r22, r28
     4f4:	80 e3       	ldi	r24, 0x30	; 48
     4f6:	82 0f       	add	r24, r18
     4f8:	0e 94 0f 02 	call	0x41e	; 0x41e <writeChar>
     4fc:	21 96       	adiw	r28, 0x01	; 1
     4fe:	c5 01       	movw	r24, r10
     500:	b4 01       	movw	r22, r8
     502:	a7 01       	movw	r20, r14
     504:	96 01       	movw	r18, r12
     506:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <__divmodsi4>
     50a:	86 2f       	mov	r24, r22
     50c:	be 01       	movw	r22, r28
     50e:	80 5d       	subi	r24, 0xD0	; 208
     510:	0e 94 0f 02 	call	0x41e	; 0x41e <writeChar>
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	ff 90       	pop	r15
     51a:	ef 90       	pop	r14
     51c:	df 90       	pop	r13
     51e:	cf 90       	pop	r12
     520:	bf 90       	pop	r11
     522:	af 90       	pop	r10
     524:	9f 90       	pop	r9
     526:	8f 90       	pop	r8
     528:	08 95       	ret

0000052a <northStopLight>:
     52a:	07 2e       	mov	r0, r23
     52c:	00 0c       	add	r0, r0
     52e:	88 0b       	sbc	r24, r24
     530:	99 0b       	sbc	r25, r25
     532:	44 e0       	ldi	r20, 0x04	; 4
     534:	50 e0       	ldi	r21, 0x00	; 0
     536:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <printAt>
     53a:	08 95       	ret

0000053c <carsOnBridge>:
}

void carsOnBridge(LCD* self, int cars){
	printAt(cars, 2);
     53c:	07 2e       	mov	r0, r23
     53e:	00 0c       	add	r0, r0
     540:	88 0b       	sbc	r24, r24
     542:	99 0b       	sbc	r25, r25
     544:	42 e0       	ldi	r20, 0x02	; 2
     546:	50 e0       	ldi	r21, 0x00	; 0
     548:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <printAt>
     54c:	08 95       	ret

0000054e <lcdInit>:


void lcdInit(){
	
	//Set Low power Waveform, no frame interrupt, no blanking. LCD Enable
	LCDCRA = (0 << LCDAB) | (1 << LCDEN);
     54e:	80 e8       	ldi	r24, 0x80	; 128
     550:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
	
	//drive time 300 microseconds, contrast control voltage 3.35 V.
	LCDCCR = (1 << LCDCC0) | (1 << LCDCC1) | (1 << LCDCC2) | (1 << LCDCC3);
     554:	8f e0       	ldi	r24, 0x0F	; 15
     556:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__DATA_REGION_ORIGIN__+0x87>
	
	//external asynchronous clock source, 1/3 bias, 1/4 duty cycle, 25 segments.
	LCDCRB = (1 << LCDCS) | (1<< LCDMUX0) | (1<< LCDMUX1) | (1 <<LCDPM0) | (1 <<LCDPM1) | (1 <<LCDPM2);
     55a:	87 eb       	ldi	r24, 0xB7	; 183
     55c:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
	
	//prescaler setting N=16, clock divider setting D=8
	LCDFRR = (1 << LCDCD0) | (1 << LCDCD1) | (1 << LCDCD2);
     560:	87 e0       	ldi	r24, 0x07	; 7
     562:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__DATA_REGION_ORIGIN__+0x86>
     566:	08 95       	ret

00000568 <interruptsInit>:
}

void interruptsInit(){
	
	//Interrupt request
	EIFR = 0xC0;
     568:	80 ec       	ldi	r24, 0xC0	; 192
     56a:	8c bb       	out	0x1c, r24	; 28
	
	//Cause an interrupt
	EIMSK = 0xC0;
     56c:	8d bb       	out	0x1d, r24	; 29
     56e:	08 95       	ret

00000570 <USARTInit>:


void USARTInit(){
		
		//The UBRR
		UBRR0H = THEUBRR >> 8;
     570:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
		UBRR0L = THEUBRR;
     574:	83 e3       	ldi	r24, 0x33	; 51
     576:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
		
		//Activate the pin but only on receive.
		UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
     57a:	88 e9       	ldi	r24, 0x98	; 152
     57c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
		
		//
		UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
     580:	86 e0       	ldi	r24, 0x06	; 6
     582:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     586:	08 95       	ret

00000588 <main>:


int main(void)
{
	//Set the inits.
	lcdInit();
     588:	0e 94 a7 02 	call	0x54e	; 0x54e <lcdInit>
	interruptsInit();
     58c:	0e 94 b4 02 	call	0x568	; 0x568 <interruptsInit>
	USARTInit();
     590:	0e 94 b8 02 	call	0x570	; 0x570 <USARTInit>
	
	INSTALL(&inter, receivedUSART, IRQ_USART0_RX);
     594:	48 e0       	ldi	r20, 0x08	; 8
     596:	6e ee       	ldi	r22, 0xEE	; 238
     598:	71 e0       	ldi	r23, 0x01	; 1
     59a:	80 e0       	ldi	r24, 0x00	; 0
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <install>
	
	return TINYTIMBER(&interface, carsOnBridge, 0);
     5a2:	40 e0       	ldi	r20, 0x00	; 0
     5a4:	50 e0       	ldi	r21, 0x00	; 0
     5a6:	6e e9       	ldi	r22, 0x9E	; 158
     5a8:	72 e0       	ldi	r23, 0x02	; 2
     5aa:	82 e3       	ldi	r24, 0x32	; 50
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <tinytimber>
	
	
	

}
     5b2:	08 95       	ret

000005b4 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	00 d0       	rcall	.+0      	; 0x5ba <initialize+0x6>
     5ba:	00 d0       	rcall	.+0      	; 0x5bc <initialize+0x8>
     5bc:	cd b7       	in	r28, 0x3d	; 61
     5be:	de b7       	in	r29, 0x3e	; 62
     5c0:	89 e2       	ldi	r24, 0x29	; 41
     5c2:	92 e0       	ldi	r25, 0x02	; 2
     5c4:	29 e0       	ldi	r18, 0x09	; 9
     5c6:	33 e0       	ldi	r19, 0x03	; 3
     5c8:	fc 01       	movw	r30, r24
     5ca:	70 97       	sbiw	r30, 0x10	; 16
     5cc:	91 83       	std	Z+1, r25	; 0x01
     5ce:	80 83       	st	Z, r24
     5d0:	40 96       	adiw	r24, 0x10	; 16
     5d2:	82 17       	cp	r24, r18
     5d4:	93 07       	cpc	r25, r19
     5d6:	c1 f7       	brne	.-16     	; 0x5c8 <initialize+0x14>
     5d8:	10 92 fa 02 	sts	0x02FA, r1	; 0x8002fa <messages+0xe1>
     5dc:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <messages+0xe0>
     5e0:	e4 e6       	ldi	r30, 0x64	; 100
     5e2:	f1 e0       	ldi	r31, 0x01	; 1
     5e4:	81 e8       	ldi	r24, 0x81	; 129
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	91 83       	std	Z+1, r25	; 0x01
     5ea:	80 83       	st	Z, r24
     5ec:	8e e9       	ldi	r24, 0x9E	; 158
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	96 8f       	std	Z+30, r25	; 0x1e
     5f2:	85 8f       	std	Z+29, r24	; 0x1d
     5f4:	ab eb       	ldi	r26, 0xBB	; 187
     5f6:	b1 e0       	ldi	r27, 0x01	; 1
     5f8:	b3 af       	std	Z+59, r27	; 0x3b
     5fa:	a2 af       	std	Z+58, r26	; 0x3a
     5fc:	1d 92       	st	X+, r1
     5fe:	1c 92       	st	X, r1
     600:	fa 83       	std	Y+2, r31	; 0x02
     602:	e9 83       	std	Y+1, r30	; 0x01
     604:	e5 e6       	ldi	r30, 0x65	; 101
     606:	f3 e0       	ldi	r31, 0x03	; 3
     608:	fc 83       	std	Y+4, r31	; 0x04
     60a:	eb 83       	std	Y+3, r30	; 0x03
     60c:	89 81       	ldd	r24, Y+1	; 0x01
     60e:	9a 81       	ldd	r25, Y+2	; 0x02
     610:	06 96       	adiw	r24, 0x06	; 6
     612:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <setjmp>
     616:	8b 81       	ldd	r24, Y+3	; 0x03
     618:	9c 81       	ldd	r25, Y+4	; 0x04
     61a:	e9 81       	ldd	r30, Y+1	; 0x01
     61c:	fa 81       	ldd	r31, Y+2	; 0x02
     61e:	97 8b       	std	Z+23, r25	; 0x17
     620:	86 8b       	std	Z+22, r24	; 0x16
     622:	91 8f       	std	Z+25, r25	; 0x19
     624:	80 8f       	std	Z+24, r24	; 0x18
     626:	8a e7       	ldi	r24, 0x7A	; 122
     628:	9e e0       	ldi	r25, 0x0E	; 14
     62a:	94 8f       	std	Z+28, r25	; 0x1c
     62c:	83 8f       	std	Z+27, r24	; 0x1b
     62e:	15 82       	std	Z+5, r1	; 0x05
     630:	14 82       	std	Z+4, r1	; 0x04
     632:	7d 96       	adiw	r30, 0x1d	; 29
     634:	fa 83       	std	Y+2, r31	; 0x02
     636:	e9 83       	std	Y+1, r30	; 0x01
     638:	eb 81       	ldd	r30, Y+3	; 0x03
     63a:	fc 81       	ldd	r31, Y+4	; 0x04
     63c:	e0 5a       	subi	r30, 0xA0	; 160
     63e:	ff 4f       	sbci	r31, 0xFF	; 255
     640:	fc 83       	std	Y+4, r31	; 0x04
     642:	eb 83       	std	Y+3, r30	; 0x03
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	9a 81       	ldd	r25, Y+2	; 0x02
     648:	88 5d       	subi	r24, 0xD8	; 216
     64a:	91 40       	sbci	r25, 0x01	; 1
     64c:	f9 f6       	brne	.-66     	; 0x60c <initialize+0x58>
     64e:	ec ef       	ldi	r30, 0xFC	; 252
     650:	f1 e0       	ldi	r31, 0x01	; 1
     652:	11 82       	std	Z+1, r1	; 0x01
     654:	10 82       	st	Z, r1
     656:	15 82       	std	Z+5, r1	; 0x05
     658:	14 82       	std	Z+4, r1	; 0x04
     65a:	13 82       	std	Z+3, r1	; 0x03
     65c:	12 82       	std	Z+2, r1	; 0x02
     65e:	e1 e6       	ldi	r30, 0x61	; 97
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 e8       	ldi	r24, 0x80	; 128
     664:	80 83       	st	Z, r24
     666:	10 82       	st	Z, r1
     668:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     66c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     670:	84 e0       	ldi	r24, 0x04	; 4
     672:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	0f 90       	pop	r0
     682:	0f 90       	pop	r0
     684:	df 91       	pop	r29
     686:	cf 91       	pop	r28
     688:	08 95       	ret

0000068a <dispatch>:
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
     68e:	00 d0       	rcall	.+0      	; 0x690 <dispatch+0x6>
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
     694:	9a 83       	std	Y+2, r25	; 0x02
     696:	89 83       	std	Y+1, r24	; 0x01
     698:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <current>
     69c:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <current+0x1>
     6a0:	06 96       	adiw	r24, 0x06	; 6
     6a2:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <setjmp>
     6a6:	89 2b       	or	r24, r25
     6a8:	59 f4       	brne	.+22     	; 0x6c0 <dispatch+0x36>
     6aa:	89 81       	ldd	r24, Y+1	; 0x01
     6ac:	9a 81       	ldd	r25, Y+2	; 0x02
     6ae:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <current+0x1>
     6b2:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <current>
     6b6:	61 e0       	ldi	r22, 0x01	; 1
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	06 96       	adiw	r24, 0x06	; 6
     6bc:	0e 94 7f 0f 	call	0x1efe	; 0x1efe <longjmp>
     6c0:	0f 90       	pop	r0
     6c2:	0f 90       	pop	r0
     6c4:	df 91       	pop	r29
     6c6:	cf 91       	pop	r28
     6c8:	08 95       	ret

000006ca <schedule>:
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	e0 91 3e 01 	lds	r30, 0x013E	; 0x80013e <msgQ>
     6d6:	f0 91 3f 01 	lds	r31, 0x013F	; 0x80013f <msgQ+0x1>
     6da:	30 97       	sbiw	r30, 0x00	; 0
     6dc:	61 f1       	breq	.+88     	; 0x736 <schedule+0x6c>
     6de:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <threadPool>
     6e2:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <threadPool+0x1>
     6e6:	00 97       	sbiw	r24, 0x00	; 0
     6e8:	31 f1       	breq	.+76     	; 0x736 <schedule+0x6c>
     6ea:	c0 91 17 01 	lds	r28, 0x0117	; 0x800117 <activeStack>
     6ee:	d0 91 18 01 	lds	r29, 0x0118	; 0x800118 <activeStack+0x1>
     6f2:	aa 81       	ldd	r26, Y+2	; 0x02
     6f4:	bb 81       	ldd	r27, Y+3	; 0x03
     6f6:	10 97       	sbiw	r26, 0x00	; 0
     6f8:	79 f0       	breq	.+30     	; 0x718 <schedule+0x4e>
     6fa:	46 81       	ldd	r20, Z+6	; 0x06
     6fc:	57 81       	ldd	r21, Z+7	; 0x07
     6fe:	60 85       	ldd	r22, Z+8	; 0x08
     700:	71 85       	ldd	r23, Z+9	; 0x09
     702:	16 96       	adiw	r26, 0x06	; 6
     704:	0d 91       	ld	r16, X+
     706:	1d 91       	ld	r17, X+
     708:	2d 91       	ld	r18, X+
     70a:	3c 91       	ld	r19, X
     70c:	19 97       	sbiw	r26, 0x09	; 9
     70e:	40 1b       	sub	r20, r16
     710:	51 0b       	sbc	r21, r17
     712:	62 0b       	sbc	r22, r18
     714:	73 0b       	sbc	r23, r19
     716:	7a f4       	brpl	.+30     	; 0x736 <schedule+0x6c>
     718:	fc 01       	movw	r30, r24
     71a:	20 81       	ld	r18, Z
     71c:	31 81       	ldd	r19, Z+1	; 0x01
     71e:	30 93 1a 01 	sts	0x011A, r19	; 0x80011a <threadPool+0x1>
     722:	20 93 19 01 	sts	0x0119, r18	; 0x800119 <threadPool>
     726:	d1 83       	std	Z+1, r29	; 0x01
     728:	c0 83       	st	Z, r28
     72a:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <activeStack+0x1>
     72e:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <activeStack>
     732:	0e 94 45 03 	call	0x68a	; 0x68a <dispatch>
     736:	df 91       	pop	r29
     738:	cf 91       	pop	r28
     73a:	1f 91       	pop	r17
     73c:	0f 91       	pop	r16
     73e:	08 95       	ret

00000740 <__vector_1>:
     740:	1f 92       	push	r1
     742:	0f 92       	push	r0
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	0f 92       	push	r0
     748:	11 24       	eor	r1, r1
     74a:	2f 93       	push	r18
     74c:	3f 93       	push	r19
     74e:	4f 93       	push	r20
     750:	5f 93       	push	r21
     752:	6f 93       	push	r22
     754:	7f 93       	push	r23
     756:	8f 93       	push	r24
     758:	9f 93       	push	r25
     75a:	af 93       	push	r26
     75c:	bf 93       	push	r27
     75e:	ef 93       	push	r30
     760:	ff 93       	push	r31
     762:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
     766:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
     76a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     76e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     772:	c9 01       	movw	r24, r18
     774:	03 2e       	mov	r0, r19
     776:	00 0c       	add	r0, r0
     778:	aa 0b       	sbc	r26, r26
     77a:	bb 0b       	sbc	r27, r27
     77c:	dc 01       	movw	r26, r24
     77e:	99 27       	eor	r25, r25
     780:	88 27       	eor	r24, r24
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	84 2b       	or	r24, r20
     788:	95 2b       	or	r25, r21
     78a:	a6 2b       	or	r26, r22
     78c:	b7 2b       	or	r27, r23
     78e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     792:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     796:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     79a:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     79e:	b0 9b       	sbis	0x16, 0	; 22
     7a0:	1b c0       	rjmp	.+54     	; 0x7d8 <__vector_1+0x98>
     7a2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     7a6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     7aa:	c9 01       	movw	r24, r18
     7ac:	01 96       	adiw	r24, 0x01	; 1
     7ae:	09 2e       	mov	r0, r25
     7b0:	00 0c       	add	r0, r0
     7b2:	aa 0b       	sbc	r26, r26
     7b4:	bb 0b       	sbc	r27, r27
     7b6:	dc 01       	movw	r26, r24
     7b8:	99 27       	eor	r25, r25
     7ba:	88 27       	eor	r24, r24
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	70 e0       	ldi	r23, 0x00	; 0
     7c0:	84 2b       	or	r24, r20
     7c2:	95 2b       	or	r25, r21
     7c4:	a6 2b       	or	r26, r22
     7c6:	b7 2b       	or	r27, r23
     7c8:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     7cc:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     7d0:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     7d4:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     7d8:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable>
     7dc:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0x1>
     7e0:	30 97       	sbiw	r30, 0x00	; 0
     7e2:	39 f0       	breq	.+14     	; 0x7f2 <__vector_1+0xb2>
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	70 e0       	ldi	r23, 0x00	; 0
     7e8:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable>
     7ec:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0x1>
     7f0:	09 95       	icall
     7f2:	0e 94 65 03 	call	0x6ca	; 0x6ca <schedule>
     7f6:	ff 91       	pop	r31
     7f8:	ef 91       	pop	r30
     7fa:	bf 91       	pop	r27
     7fc:	af 91       	pop	r26
     7fe:	9f 91       	pop	r25
     800:	8f 91       	pop	r24
     802:	7f 91       	pop	r23
     804:	6f 91       	pop	r22
     806:	5f 91       	pop	r21
     808:	4f 91       	pop	r20
     80a:	3f 91       	pop	r19
     80c:	2f 91       	pop	r18
     80e:	0f 90       	pop	r0
     810:	0f be       	out	0x3f, r0	; 63
     812:	0f 90       	pop	r0
     814:	1f 90       	pop	r1
     816:	18 95       	reti

00000818 <__vector_2>:
     818:	1f 92       	push	r1
     81a:	0f 92       	push	r0
     81c:	0f b6       	in	r0, 0x3f	; 63
     81e:	0f 92       	push	r0
     820:	11 24       	eor	r1, r1
     822:	2f 93       	push	r18
     824:	3f 93       	push	r19
     826:	4f 93       	push	r20
     828:	5f 93       	push	r21
     82a:	6f 93       	push	r22
     82c:	7f 93       	push	r23
     82e:	8f 93       	push	r24
     830:	9f 93       	push	r25
     832:	af 93       	push	r26
     834:	bf 93       	push	r27
     836:	ef 93       	push	r30
     838:	ff 93       	push	r31
     83a:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
     83e:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
     842:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     846:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     84a:	c9 01       	movw	r24, r18
     84c:	03 2e       	mov	r0, r19
     84e:	00 0c       	add	r0, r0
     850:	aa 0b       	sbc	r26, r26
     852:	bb 0b       	sbc	r27, r27
     854:	dc 01       	movw	r26, r24
     856:	99 27       	eor	r25, r25
     858:	88 27       	eor	r24, r24
     85a:	60 e0       	ldi	r22, 0x00	; 0
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	84 2b       	or	r24, r20
     860:	95 2b       	or	r25, r21
     862:	a6 2b       	or	r26, r22
     864:	b7 2b       	or	r27, r23
     866:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     86a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     86e:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     872:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     876:	b0 9b       	sbis	0x16, 0	; 22
     878:	1b c0       	rjmp	.+54     	; 0x8b0 <__vector_2+0x98>
     87a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     87e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     882:	c9 01       	movw	r24, r18
     884:	01 96       	adiw	r24, 0x01	; 1
     886:	09 2e       	mov	r0, r25
     888:	00 0c       	add	r0, r0
     88a:	aa 0b       	sbc	r26, r26
     88c:	bb 0b       	sbc	r27, r27
     88e:	dc 01       	movw	r26, r24
     890:	99 27       	eor	r25, r25
     892:	88 27       	eor	r24, r24
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	84 2b       	or	r24, r20
     89a:	95 2b       	or	r25, r21
     89c:	a6 2b       	or	r26, r22
     89e:	b7 2b       	or	r27, r23
     8a0:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     8a4:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     8a8:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     8ac:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     8b0:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable+0x2>
     8b4:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x3>
     8b8:	30 97       	sbiw	r30, 0x00	; 0
     8ba:	39 f0       	breq	.+14     	; 0x8ca <__vector_2+0xb2>
     8bc:	61 e0       	ldi	r22, 0x01	; 1
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0x2>
     8c4:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x3>
     8c8:	09 95       	icall
     8ca:	0e 94 65 03 	call	0x6ca	; 0x6ca <schedule>
     8ce:	ff 91       	pop	r31
     8d0:	ef 91       	pop	r30
     8d2:	bf 91       	pop	r27
     8d4:	af 91       	pop	r26
     8d6:	9f 91       	pop	r25
     8d8:	8f 91       	pop	r24
     8da:	7f 91       	pop	r23
     8dc:	6f 91       	pop	r22
     8de:	5f 91       	pop	r21
     8e0:	4f 91       	pop	r20
     8e2:	3f 91       	pop	r19
     8e4:	2f 91       	pop	r18
     8e6:	0f 90       	pop	r0
     8e8:	0f be       	out	0x3f, r0	; 63
     8ea:	0f 90       	pop	r0
     8ec:	1f 90       	pop	r1
     8ee:	18 95       	reti

000008f0 <__vector_3>:
     8f0:	1f 92       	push	r1
     8f2:	0f 92       	push	r0
     8f4:	0f b6       	in	r0, 0x3f	; 63
     8f6:	0f 92       	push	r0
     8f8:	11 24       	eor	r1, r1
     8fa:	2f 93       	push	r18
     8fc:	3f 93       	push	r19
     8fe:	4f 93       	push	r20
     900:	5f 93       	push	r21
     902:	6f 93       	push	r22
     904:	7f 93       	push	r23
     906:	8f 93       	push	r24
     908:	9f 93       	push	r25
     90a:	af 93       	push	r26
     90c:	bf 93       	push	r27
     90e:	ef 93       	push	r30
     910:	ff 93       	push	r31
     912:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
     916:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
     91a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     91e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     922:	c9 01       	movw	r24, r18
     924:	03 2e       	mov	r0, r19
     926:	00 0c       	add	r0, r0
     928:	aa 0b       	sbc	r26, r26
     92a:	bb 0b       	sbc	r27, r27
     92c:	dc 01       	movw	r26, r24
     92e:	99 27       	eor	r25, r25
     930:	88 27       	eor	r24, r24
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	70 e0       	ldi	r23, 0x00	; 0
     936:	84 2b       	or	r24, r20
     938:	95 2b       	or	r25, r21
     93a:	a6 2b       	or	r26, r22
     93c:	b7 2b       	or	r27, r23
     93e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     942:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     946:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     94a:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     94e:	b0 9b       	sbis	0x16, 0	; 22
     950:	1b c0       	rjmp	.+54     	; 0x988 <__vector_3+0x98>
     952:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     956:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     95a:	c9 01       	movw	r24, r18
     95c:	01 96       	adiw	r24, 0x01	; 1
     95e:	09 2e       	mov	r0, r25
     960:	00 0c       	add	r0, r0
     962:	aa 0b       	sbc	r26, r26
     964:	bb 0b       	sbc	r27, r27
     966:	dc 01       	movw	r26, r24
     968:	99 27       	eor	r25, r25
     96a:	88 27       	eor	r24, r24
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	84 2b       	or	r24, r20
     972:	95 2b       	or	r25, r21
     974:	a6 2b       	or	r26, r22
     976:	b7 2b       	or	r27, r23
     978:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     97c:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     980:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     984:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     988:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x4>
     98c:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x5>
     990:	30 97       	sbiw	r30, 0x00	; 0
     992:	39 f0       	breq	.+14     	; 0x9a2 <__vector_3+0xb2>
     994:	62 e0       	ldi	r22, 0x02	; 2
     996:	70 e0       	ldi	r23, 0x00	; 0
     998:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x4>
     99c:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x5>
     9a0:	09 95       	icall
     9a2:	0e 94 65 03 	call	0x6ca	; 0x6ca <schedule>
     9a6:	ff 91       	pop	r31
     9a8:	ef 91       	pop	r30
     9aa:	bf 91       	pop	r27
     9ac:	af 91       	pop	r26
     9ae:	9f 91       	pop	r25
     9b0:	8f 91       	pop	r24
     9b2:	7f 91       	pop	r23
     9b4:	6f 91       	pop	r22
     9b6:	5f 91       	pop	r21
     9b8:	4f 91       	pop	r20
     9ba:	3f 91       	pop	r19
     9bc:	2f 91       	pop	r18
     9be:	0f 90       	pop	r0
     9c0:	0f be       	out	0x3f, r0	; 63
     9c2:	0f 90       	pop	r0
     9c4:	1f 90       	pop	r1
     9c6:	18 95       	reti

000009c8 <__vector_4>:
     9c8:	1f 92       	push	r1
     9ca:	0f 92       	push	r0
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	0f 92       	push	r0
     9d0:	11 24       	eor	r1, r1
     9d2:	2f 93       	push	r18
     9d4:	3f 93       	push	r19
     9d6:	4f 93       	push	r20
     9d8:	5f 93       	push	r21
     9da:	6f 93       	push	r22
     9dc:	7f 93       	push	r23
     9de:	8f 93       	push	r24
     9e0:	9f 93       	push	r25
     9e2:	af 93       	push	r26
     9e4:	bf 93       	push	r27
     9e6:	ef 93       	push	r30
     9e8:	ff 93       	push	r31
     9ea:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
     9ee:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
     9f2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     9f6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     9fa:	c9 01       	movw	r24, r18
     9fc:	03 2e       	mov	r0, r19
     9fe:	00 0c       	add	r0, r0
     a00:	aa 0b       	sbc	r26, r26
     a02:	bb 0b       	sbc	r27, r27
     a04:	dc 01       	movw	r26, r24
     a06:	99 27       	eor	r25, r25
     a08:	88 27       	eor	r24, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	84 2b       	or	r24, r20
     a10:	95 2b       	or	r25, r21
     a12:	a6 2b       	or	r26, r22
     a14:	b7 2b       	or	r27, r23
     a16:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     a1a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     a1e:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     a22:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     a26:	b0 9b       	sbis	0x16, 0	; 22
     a28:	1b c0       	rjmp	.+54     	; 0xa60 <__vector_4+0x98>
     a2a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     a2e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     a32:	c9 01       	movw	r24, r18
     a34:	01 96       	adiw	r24, 0x01	; 1
     a36:	09 2e       	mov	r0, r25
     a38:	00 0c       	add	r0, r0
     a3a:	aa 0b       	sbc	r26, r26
     a3c:	bb 0b       	sbc	r27, r27
     a3e:	dc 01       	movw	r26, r24
     a40:	99 27       	eor	r25, r25
     a42:	88 27       	eor	r24, r24
     a44:	60 e0       	ldi	r22, 0x00	; 0
     a46:	70 e0       	ldi	r23, 0x00	; 0
     a48:	84 2b       	or	r24, r20
     a4a:	95 2b       	or	r25, r21
     a4c:	a6 2b       	or	r26, r22
     a4e:	b7 2b       	or	r27, r23
     a50:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     a54:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     a58:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     a5c:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     a60:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x6>
     a64:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x7>
     a68:	30 97       	sbiw	r30, 0x00	; 0
     a6a:	39 f0       	breq	.+14     	; 0xa7a <__vector_4+0xb2>
     a6c:	63 e0       	ldi	r22, 0x03	; 3
     a6e:	70 e0       	ldi	r23, 0x00	; 0
     a70:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x6>
     a74:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x7>
     a78:	09 95       	icall
     a7a:	0e 94 65 03 	call	0x6ca	; 0x6ca <schedule>
     a7e:	ff 91       	pop	r31
     a80:	ef 91       	pop	r30
     a82:	bf 91       	pop	r27
     a84:	af 91       	pop	r26
     a86:	9f 91       	pop	r25
     a88:	8f 91       	pop	r24
     a8a:	7f 91       	pop	r23
     a8c:	6f 91       	pop	r22
     a8e:	5f 91       	pop	r21
     a90:	4f 91       	pop	r20
     a92:	3f 91       	pop	r19
     a94:	2f 91       	pop	r18
     a96:	0f 90       	pop	r0
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	0f 90       	pop	r0
     a9c:	1f 90       	pop	r1
     a9e:	18 95       	reti

00000aa0 <__vector_5>:
     aa0:	1f 92       	push	r1
     aa2:	0f 92       	push	r0
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	0f 92       	push	r0
     aa8:	11 24       	eor	r1, r1
     aaa:	2f 93       	push	r18
     aac:	3f 93       	push	r19
     aae:	4f 93       	push	r20
     ab0:	5f 93       	push	r21
     ab2:	6f 93       	push	r22
     ab4:	7f 93       	push	r23
     ab6:	8f 93       	push	r24
     ab8:	9f 93       	push	r25
     aba:	af 93       	push	r26
     abc:	bf 93       	push	r27
     abe:	ef 93       	push	r30
     ac0:	ff 93       	push	r31
     ac2:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
     ac6:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
     aca:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ace:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     ad2:	c9 01       	movw	r24, r18
     ad4:	03 2e       	mov	r0, r19
     ad6:	00 0c       	add	r0, r0
     ad8:	aa 0b       	sbc	r26, r26
     ada:	bb 0b       	sbc	r27, r27
     adc:	dc 01       	movw	r26, r24
     ade:	99 27       	eor	r25, r25
     ae0:	88 27       	eor	r24, r24
     ae2:	60 e0       	ldi	r22, 0x00	; 0
     ae4:	70 e0       	ldi	r23, 0x00	; 0
     ae6:	84 2b       	or	r24, r20
     ae8:	95 2b       	or	r25, r21
     aea:	a6 2b       	or	r26, r22
     aec:	b7 2b       	or	r27, r23
     aee:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     af2:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     af6:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     afa:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     afe:	b0 9b       	sbis	0x16, 0	; 22
     b00:	1b c0       	rjmp	.+54     	; 0xb38 <__vector_5+0x98>
     b02:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     b06:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     b0a:	c9 01       	movw	r24, r18
     b0c:	01 96       	adiw	r24, 0x01	; 1
     b0e:	09 2e       	mov	r0, r25
     b10:	00 0c       	add	r0, r0
     b12:	aa 0b       	sbc	r26, r26
     b14:	bb 0b       	sbc	r27, r27
     b16:	dc 01       	movw	r26, r24
     b18:	99 27       	eor	r25, r25
     b1a:	88 27       	eor	r24, r24
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	84 2b       	or	r24, r20
     b22:	95 2b       	or	r25, r21
     b24:	a6 2b       	or	r26, r22
     b26:	b7 2b       	or	r27, r23
     b28:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     b2c:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     b30:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     b34:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     b38:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x8>
     b3c:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x9>
     b40:	30 97       	sbiw	r30, 0x00	; 0
     b42:	39 f0       	breq	.+14     	; 0xb52 <__vector_5+0xb2>
     b44:	64 e0       	ldi	r22, 0x04	; 4
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x8>
     b4c:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x9>
     b50:	09 95       	icall
     b52:	0e 94 65 03 	call	0x6ca	; 0x6ca <schedule>
     b56:	ff 91       	pop	r31
     b58:	ef 91       	pop	r30
     b5a:	bf 91       	pop	r27
     b5c:	af 91       	pop	r26
     b5e:	9f 91       	pop	r25
     b60:	8f 91       	pop	r24
     b62:	7f 91       	pop	r23
     b64:	6f 91       	pop	r22
     b66:	5f 91       	pop	r21
     b68:	4f 91       	pop	r20
     b6a:	3f 91       	pop	r19
     b6c:	2f 91       	pop	r18
     b6e:	0f 90       	pop	r0
     b70:	0f be       	out	0x3f, r0	; 63
     b72:	0f 90       	pop	r0
     b74:	1f 90       	pop	r1
     b76:	18 95       	reti

00000b78 <__vector_10>:
     b78:	1f 92       	push	r1
     b7a:	0f 92       	push	r0
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	0f 92       	push	r0
     b80:	11 24       	eor	r1, r1
     b82:	2f 93       	push	r18
     b84:	3f 93       	push	r19
     b86:	4f 93       	push	r20
     b88:	5f 93       	push	r21
     b8a:	6f 93       	push	r22
     b8c:	7f 93       	push	r23
     b8e:	8f 93       	push	r24
     b90:	9f 93       	push	r25
     b92:	af 93       	push	r26
     b94:	bf 93       	push	r27
     b96:	ef 93       	push	r30
     b98:	ff 93       	push	r31
     b9a:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
     b9e:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
     ba2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     ba6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     baa:	c9 01       	movw	r24, r18
     bac:	03 2e       	mov	r0, r19
     bae:	00 0c       	add	r0, r0
     bb0:	aa 0b       	sbc	r26, r26
     bb2:	bb 0b       	sbc	r27, r27
     bb4:	dc 01       	movw	r26, r24
     bb6:	99 27       	eor	r25, r25
     bb8:	88 27       	eor	r24, r24
     bba:	60 e0       	ldi	r22, 0x00	; 0
     bbc:	70 e0       	ldi	r23, 0x00	; 0
     bbe:	84 2b       	or	r24, r20
     bc0:	95 2b       	or	r25, r21
     bc2:	a6 2b       	or	r26, r22
     bc4:	b7 2b       	or	r27, r23
     bc6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     bca:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     bce:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     bd2:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     bd6:	b0 9b       	sbis	0x16, 0	; 22
     bd8:	1b c0       	rjmp	.+54     	; 0xc10 <__vector_10+0x98>
     bda:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     bde:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     be2:	c9 01       	movw	r24, r18
     be4:	01 96       	adiw	r24, 0x01	; 1
     be6:	09 2e       	mov	r0, r25
     be8:	00 0c       	add	r0, r0
     bea:	aa 0b       	sbc	r26, r26
     bec:	bb 0b       	sbc	r27, r27
     bee:	dc 01       	movw	r26, r24
     bf0:	99 27       	eor	r25, r25
     bf2:	88 27       	eor	r24, r24
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	84 2b       	or	r24, r20
     bfa:	95 2b       	or	r25, r21
     bfc:	a6 2b       	or	r26, r22
     bfe:	b7 2b       	or	r27, r23
     c00:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     c04:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     c08:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     c0c:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     c10:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0xa>
     c14:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0xb>
     c18:	30 97       	sbiw	r30, 0x00	; 0
     c1a:	39 f0       	breq	.+14     	; 0xc2a <__vector_10+0xb2>
     c1c:	65 e0       	ldi	r22, 0x05	; 5
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0xa>
     c24:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0xb>
     c28:	09 95       	icall
     c2a:	0e 94 65 03 	call	0x6ca	; 0x6ca <schedule>
     c2e:	ff 91       	pop	r31
     c30:	ef 91       	pop	r30
     c32:	bf 91       	pop	r27
     c34:	af 91       	pop	r26
     c36:	9f 91       	pop	r25
     c38:	8f 91       	pop	r24
     c3a:	7f 91       	pop	r23
     c3c:	6f 91       	pop	r22
     c3e:	5f 91       	pop	r21
     c40:	4f 91       	pop	r20
     c42:	3f 91       	pop	r19
     c44:	2f 91       	pop	r18
     c46:	0f 90       	pop	r0
     c48:	0f be       	out	0x3f, r0	; 63
     c4a:	0f 90       	pop	r0
     c4c:	1f 90       	pop	r1
     c4e:	18 95       	reti

00000c50 <__vector_11>:
     c50:	1f 92       	push	r1
     c52:	0f 92       	push	r0
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	0f 92       	push	r0
     c58:	11 24       	eor	r1, r1
     c5a:	2f 93       	push	r18
     c5c:	3f 93       	push	r19
     c5e:	4f 93       	push	r20
     c60:	5f 93       	push	r21
     c62:	6f 93       	push	r22
     c64:	7f 93       	push	r23
     c66:	8f 93       	push	r24
     c68:	9f 93       	push	r25
     c6a:	af 93       	push	r26
     c6c:	bf 93       	push	r27
     c6e:	ef 93       	push	r30
     c70:	ff 93       	push	r31
     c72:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
     c76:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
     c7a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     c7e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     c82:	c9 01       	movw	r24, r18
     c84:	03 2e       	mov	r0, r19
     c86:	00 0c       	add	r0, r0
     c88:	aa 0b       	sbc	r26, r26
     c8a:	bb 0b       	sbc	r27, r27
     c8c:	dc 01       	movw	r26, r24
     c8e:	99 27       	eor	r25, r25
     c90:	88 27       	eor	r24, r24
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	84 2b       	or	r24, r20
     c98:	95 2b       	or	r25, r21
     c9a:	a6 2b       	or	r26, r22
     c9c:	b7 2b       	or	r27, r23
     c9e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     ca2:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     ca6:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     caa:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     cae:	b0 9b       	sbis	0x16, 0	; 22
     cb0:	1b c0       	rjmp	.+54     	; 0xce8 <__vector_11+0x98>
     cb2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     cb6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     cba:	c9 01       	movw	r24, r18
     cbc:	01 96       	adiw	r24, 0x01	; 1
     cbe:	09 2e       	mov	r0, r25
     cc0:	00 0c       	add	r0, r0
     cc2:	aa 0b       	sbc	r26, r26
     cc4:	bb 0b       	sbc	r27, r27
     cc6:	dc 01       	movw	r26, r24
     cc8:	99 27       	eor	r25, r25
     cca:	88 27       	eor	r24, r24
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	84 2b       	or	r24, r20
     cd2:	95 2b       	or	r25, r21
     cd4:	a6 2b       	or	r26, r22
     cd6:	b7 2b       	or	r27, r23
     cd8:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     cdc:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     ce0:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     ce4:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     ce8:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable+0xc>
     cec:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0xd>
     cf0:	30 97       	sbiw	r30, 0x00	; 0
     cf2:	39 f0       	breq	.+14     	; 0xd02 <__vector_11+0xb2>
     cf4:	66 e0       	ldi	r22, 0x06	; 6
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable+0xc>
     cfc:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0xd>
     d00:	09 95       	icall
     d02:	0e 94 65 03 	call	0x6ca	; 0x6ca <schedule>
     d06:	ff 91       	pop	r31
     d08:	ef 91       	pop	r30
     d0a:	bf 91       	pop	r27
     d0c:	af 91       	pop	r26
     d0e:	9f 91       	pop	r25
     d10:	8f 91       	pop	r24
     d12:	7f 91       	pop	r23
     d14:	6f 91       	pop	r22
     d16:	5f 91       	pop	r21
     d18:	4f 91       	pop	r20
     d1a:	3f 91       	pop	r19
     d1c:	2f 91       	pop	r18
     d1e:	0f 90       	pop	r0
     d20:	0f be       	out	0x3f, r0	; 63
     d22:	0f 90       	pop	r0
     d24:	1f 90       	pop	r1
     d26:	18 95       	reti

00000d28 <__vector_12>:
     d28:	1f 92       	push	r1
     d2a:	0f 92       	push	r0
     d2c:	0f b6       	in	r0, 0x3f	; 63
     d2e:	0f 92       	push	r0
     d30:	11 24       	eor	r1, r1
     d32:	2f 93       	push	r18
     d34:	3f 93       	push	r19
     d36:	4f 93       	push	r20
     d38:	5f 93       	push	r21
     d3a:	6f 93       	push	r22
     d3c:	7f 93       	push	r23
     d3e:	8f 93       	push	r24
     d40:	9f 93       	push	r25
     d42:	af 93       	push	r26
     d44:	bf 93       	push	r27
     d46:	ef 93       	push	r30
     d48:	ff 93       	push	r31
     d4a:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
     d4e:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
     d52:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d56:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d5a:	c9 01       	movw	r24, r18
     d5c:	03 2e       	mov	r0, r19
     d5e:	00 0c       	add	r0, r0
     d60:	aa 0b       	sbc	r26, r26
     d62:	bb 0b       	sbc	r27, r27
     d64:	dc 01       	movw	r26, r24
     d66:	99 27       	eor	r25, r25
     d68:	88 27       	eor	r24, r24
     d6a:	60 e0       	ldi	r22, 0x00	; 0
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	84 2b       	or	r24, r20
     d70:	95 2b       	or	r25, r21
     d72:	a6 2b       	or	r26, r22
     d74:	b7 2b       	or	r27, r23
     d76:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     d7a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     d7e:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     d82:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     d86:	b0 9b       	sbis	0x16, 0	; 22
     d88:	1b c0       	rjmp	.+54     	; 0xdc0 <__vector_12+0x98>
     d8a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     d8e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     d92:	c9 01       	movw	r24, r18
     d94:	01 96       	adiw	r24, 0x01	; 1
     d96:	09 2e       	mov	r0, r25
     d98:	00 0c       	add	r0, r0
     d9a:	aa 0b       	sbc	r26, r26
     d9c:	bb 0b       	sbc	r27, r27
     d9e:	dc 01       	movw	r26, r24
     da0:	99 27       	eor	r25, r25
     da2:	88 27       	eor	r24, r24
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	70 e0       	ldi	r23, 0x00	; 0
     da8:	84 2b       	or	r24, r20
     daa:	95 2b       	or	r25, r21
     dac:	a6 2b       	or	r26, r22
     dae:	b7 2b       	or	r27, r23
     db0:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     db4:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     db8:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     dbc:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     dc0:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0xe>
     dc4:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0xf>
     dc8:	30 97       	sbiw	r30, 0x00	; 0
     dca:	39 f0       	breq	.+14     	; 0xdda <__vector_12+0xb2>
     dcc:	67 e0       	ldi	r22, 0x07	; 7
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0xe>
     dd4:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0xf>
     dd8:	09 95       	icall
     dda:	0e 94 65 03 	call	0x6ca	; 0x6ca <schedule>
     dde:	ff 91       	pop	r31
     de0:	ef 91       	pop	r30
     de2:	bf 91       	pop	r27
     de4:	af 91       	pop	r26
     de6:	9f 91       	pop	r25
     de8:	8f 91       	pop	r24
     dea:	7f 91       	pop	r23
     dec:	6f 91       	pop	r22
     dee:	5f 91       	pop	r21
     df0:	4f 91       	pop	r20
     df2:	3f 91       	pop	r19
     df4:	2f 91       	pop	r18
     df6:	0f 90       	pop	r0
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	0f 90       	pop	r0
     dfc:	1f 90       	pop	r1
     dfe:	18 95       	reti

00000e00 <__vector_13>:
     e00:	1f 92       	push	r1
     e02:	0f 92       	push	r0
     e04:	0f b6       	in	r0, 0x3f	; 63
     e06:	0f 92       	push	r0
     e08:	11 24       	eor	r1, r1
     e0a:	2f 93       	push	r18
     e0c:	3f 93       	push	r19
     e0e:	4f 93       	push	r20
     e10:	5f 93       	push	r21
     e12:	6f 93       	push	r22
     e14:	7f 93       	push	r23
     e16:	8f 93       	push	r24
     e18:	9f 93       	push	r25
     e1a:	af 93       	push	r26
     e1c:	bf 93       	push	r27
     e1e:	ef 93       	push	r30
     e20:	ff 93       	push	r31
     e22:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
     e26:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
     e2a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e2e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e32:	c9 01       	movw	r24, r18
     e34:	03 2e       	mov	r0, r19
     e36:	00 0c       	add	r0, r0
     e38:	aa 0b       	sbc	r26, r26
     e3a:	bb 0b       	sbc	r27, r27
     e3c:	dc 01       	movw	r26, r24
     e3e:	99 27       	eor	r25, r25
     e40:	88 27       	eor	r24, r24
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	84 2b       	or	r24, r20
     e48:	95 2b       	or	r25, r21
     e4a:	a6 2b       	or	r26, r22
     e4c:	b7 2b       	or	r27, r23
     e4e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     e52:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     e56:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     e5a:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     e5e:	b0 9b       	sbis	0x16, 0	; 22
     e60:	1b c0       	rjmp	.+54     	; 0xe98 <__vector_13+0x98>
     e62:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     e66:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     e6a:	c9 01       	movw	r24, r18
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	09 2e       	mov	r0, r25
     e70:	00 0c       	add	r0, r0
     e72:	aa 0b       	sbc	r26, r26
     e74:	bb 0b       	sbc	r27, r27
     e76:	dc 01       	movw	r26, r24
     e78:	99 27       	eor	r25, r25
     e7a:	88 27       	eor	r24, r24
     e7c:	60 e0       	ldi	r22, 0x00	; 0
     e7e:	70 e0       	ldi	r23, 0x00	; 0
     e80:	84 2b       	or	r24, r20
     e82:	95 2b       	or	r25, r21
     e84:	a6 2b       	or	r26, r22
     e86:	b7 2b       	or	r27, r23
     e88:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     e8c:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     e90:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     e94:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     e98:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0x10>
     e9c:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0x11>
     ea0:	30 97       	sbiw	r30, 0x00	; 0
     ea2:	39 f0       	breq	.+14     	; 0xeb2 <__vector_13+0xb2>
     ea4:	68 e0       	ldi	r22, 0x08	; 8
     ea6:	70 e0       	ldi	r23, 0x00	; 0
     ea8:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0x10>
     eac:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0x11>
     eb0:	09 95       	icall
     eb2:	0e 94 65 03 	call	0x6ca	; 0x6ca <schedule>
     eb6:	ff 91       	pop	r31
     eb8:	ef 91       	pop	r30
     eba:	bf 91       	pop	r27
     ebc:	af 91       	pop	r26
     ebe:	9f 91       	pop	r25
     ec0:	8f 91       	pop	r24
     ec2:	7f 91       	pop	r23
     ec4:	6f 91       	pop	r22
     ec6:	5f 91       	pop	r21
     ec8:	4f 91       	pop	r20
     eca:	3f 91       	pop	r19
     ecc:	2f 91       	pop	r18
     ece:	0f 90       	pop	r0
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	0f 90       	pop	r0
     ed4:	1f 90       	pop	r1
     ed6:	18 95       	reti

00000ed8 <__vector_14>:
     ed8:	1f 92       	push	r1
     eda:	0f 92       	push	r0
     edc:	0f b6       	in	r0, 0x3f	; 63
     ede:	0f 92       	push	r0
     ee0:	11 24       	eor	r1, r1
     ee2:	2f 93       	push	r18
     ee4:	3f 93       	push	r19
     ee6:	4f 93       	push	r20
     ee8:	5f 93       	push	r21
     eea:	6f 93       	push	r22
     eec:	7f 93       	push	r23
     eee:	8f 93       	push	r24
     ef0:	9f 93       	push	r25
     ef2:	af 93       	push	r26
     ef4:	bf 93       	push	r27
     ef6:	ef 93       	push	r30
     ef8:	ff 93       	push	r31
     efa:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
     efe:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
     f02:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f06:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f0a:	c9 01       	movw	r24, r18
     f0c:	03 2e       	mov	r0, r19
     f0e:	00 0c       	add	r0, r0
     f10:	aa 0b       	sbc	r26, r26
     f12:	bb 0b       	sbc	r27, r27
     f14:	dc 01       	movw	r26, r24
     f16:	99 27       	eor	r25, r25
     f18:	88 27       	eor	r24, r24
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	84 2b       	or	r24, r20
     f20:	95 2b       	or	r25, r21
     f22:	a6 2b       	or	r26, r22
     f24:	b7 2b       	or	r27, r23
     f26:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     f2a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     f2e:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     f32:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     f36:	b0 9b       	sbis	0x16, 0	; 22
     f38:	1b c0       	rjmp	.+54     	; 0xf70 <__vector_14+0x98>
     f3a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     f3e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     f42:	c9 01       	movw	r24, r18
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	09 2e       	mov	r0, r25
     f48:	00 0c       	add	r0, r0
     f4a:	aa 0b       	sbc	r26, r26
     f4c:	bb 0b       	sbc	r27, r27
     f4e:	dc 01       	movw	r26, r24
     f50:	99 27       	eor	r25, r25
     f52:	88 27       	eor	r24, r24
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	84 2b       	or	r24, r20
     f5a:	95 2b       	or	r25, r21
     f5c:	a6 2b       	or	r26, r22
     f5e:	b7 2b       	or	r27, r23
     f60:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
     f64:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
     f68:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
     f6c:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
     f70:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0x12>
     f74:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0x13>
     f78:	30 97       	sbiw	r30, 0x00	; 0
     f7a:	39 f0       	breq	.+14     	; 0xf8a <__vector_14+0xb2>
     f7c:	69 e0       	ldi	r22, 0x09	; 9
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0x12>
     f84:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0x13>
     f88:	09 95       	icall
     f8a:	0e 94 65 03 	call	0x6ca	; 0x6ca <schedule>
     f8e:	ff 91       	pop	r31
     f90:	ef 91       	pop	r30
     f92:	bf 91       	pop	r27
     f94:	af 91       	pop	r26
     f96:	9f 91       	pop	r25
     f98:	8f 91       	pop	r24
     f9a:	7f 91       	pop	r23
     f9c:	6f 91       	pop	r22
     f9e:	5f 91       	pop	r21
     fa0:	4f 91       	pop	r20
     fa2:	3f 91       	pop	r19
     fa4:	2f 91       	pop	r18
     fa6:	0f 90       	pop	r0
     fa8:	0f be       	out	0x3f, r0	; 63
     faa:	0f 90       	pop	r0
     fac:	1f 90       	pop	r1
     fae:	18 95       	reti

00000fb0 <__vector_15>:
     fb0:	1f 92       	push	r1
     fb2:	0f 92       	push	r0
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	0f 92       	push	r0
     fb8:	11 24       	eor	r1, r1
     fba:	2f 93       	push	r18
     fbc:	3f 93       	push	r19
     fbe:	4f 93       	push	r20
     fc0:	5f 93       	push	r21
     fc2:	6f 93       	push	r22
     fc4:	7f 93       	push	r23
     fc6:	8f 93       	push	r24
     fc8:	9f 93       	push	r25
     fca:	af 93       	push	r26
     fcc:	bf 93       	push	r27
     fce:	ef 93       	push	r30
     fd0:	ff 93       	push	r31
     fd2:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
     fd6:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
     fda:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
     fde:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     fe2:	c9 01       	movw	r24, r18
     fe4:	03 2e       	mov	r0, r19
     fe6:	00 0c       	add	r0, r0
     fe8:	aa 0b       	sbc	r26, r26
     fea:	bb 0b       	sbc	r27, r27
     fec:	dc 01       	movw	r26, r24
     fee:	99 27       	eor	r25, r25
     ff0:	88 27       	eor	r24, r24
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	84 2b       	or	r24, r20
     ff8:	95 2b       	or	r25, r21
     ffa:	a6 2b       	or	r26, r22
     ffc:	b7 2b       	or	r27, r23
     ffe:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1002:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    1006:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    100a:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    100e:	b0 9b       	sbis	0x16, 0	; 22
    1010:	1b c0       	rjmp	.+54     	; 0x1048 <__vector_15+0x98>
    1012:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1016:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    101a:	c9 01       	movw	r24, r18
    101c:	01 96       	adiw	r24, 0x01	; 1
    101e:	09 2e       	mov	r0, r25
    1020:	00 0c       	add	r0, r0
    1022:	aa 0b       	sbc	r26, r26
    1024:	bb 0b       	sbc	r27, r27
    1026:	dc 01       	movw	r26, r24
    1028:	99 27       	eor	r25, r25
    102a:	88 27       	eor	r24, r24
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	70 e0       	ldi	r23, 0x00	; 0
    1030:	84 2b       	or	r24, r20
    1032:	95 2b       	or	r25, r21
    1034:	a6 2b       	or	r26, r22
    1036:	b7 2b       	or	r27, r23
    1038:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    103c:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    1040:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    1044:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    1048:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x14>
    104c:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x15>
    1050:	30 97       	sbiw	r30, 0x00	; 0
    1052:	39 f0       	breq	.+14     	; 0x1062 <__vector_15+0xb2>
    1054:	6a e0       	ldi	r22, 0x0A	; 10
    1056:	70 e0       	ldi	r23, 0x00	; 0
    1058:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x14>
    105c:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x15>
    1060:	09 95       	icall
    1062:	0e 94 65 03 	call	0x6ca	; 0x6ca <schedule>
    1066:	ff 91       	pop	r31
    1068:	ef 91       	pop	r30
    106a:	bf 91       	pop	r27
    106c:	af 91       	pop	r26
    106e:	9f 91       	pop	r25
    1070:	8f 91       	pop	r24
    1072:	7f 91       	pop	r23
    1074:	6f 91       	pop	r22
    1076:	5f 91       	pop	r21
    1078:	4f 91       	pop	r20
    107a:	3f 91       	pop	r19
    107c:	2f 91       	pop	r18
    107e:	0f 90       	pop	r0
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	0f 90       	pop	r0
    1084:	1f 90       	pop	r1
    1086:	18 95       	reti

00001088 <__vector_16>:
    1088:	1f 92       	push	r1
    108a:	0f 92       	push	r0
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	0f 92       	push	r0
    1090:	11 24       	eor	r1, r1
    1092:	2f 93       	push	r18
    1094:	3f 93       	push	r19
    1096:	4f 93       	push	r20
    1098:	5f 93       	push	r21
    109a:	6f 93       	push	r22
    109c:	7f 93       	push	r23
    109e:	8f 93       	push	r24
    10a0:	9f 93       	push	r25
    10a2:	af 93       	push	r26
    10a4:	bf 93       	push	r27
    10a6:	ef 93       	push	r30
    10a8:	ff 93       	push	r31
    10aa:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
    10ae:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
    10b2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10b6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10ba:	c9 01       	movw	r24, r18
    10bc:	03 2e       	mov	r0, r19
    10be:	00 0c       	add	r0, r0
    10c0:	aa 0b       	sbc	r26, r26
    10c2:	bb 0b       	sbc	r27, r27
    10c4:	dc 01       	movw	r26, r24
    10c6:	99 27       	eor	r25, r25
    10c8:	88 27       	eor	r24, r24
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	70 e0       	ldi	r23, 0x00	; 0
    10ce:	84 2b       	or	r24, r20
    10d0:	95 2b       	or	r25, r21
    10d2:	a6 2b       	or	r26, r22
    10d4:	b7 2b       	or	r27, r23
    10d6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    10da:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    10de:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    10e2:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    10e6:	b0 9b       	sbis	0x16, 0	; 22
    10e8:	1b c0       	rjmp	.+54     	; 0x1120 <__vector_16+0x98>
    10ea:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    10ee:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    10f2:	c9 01       	movw	r24, r18
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	09 2e       	mov	r0, r25
    10f8:	00 0c       	add	r0, r0
    10fa:	aa 0b       	sbc	r26, r26
    10fc:	bb 0b       	sbc	r27, r27
    10fe:	dc 01       	movw	r26, r24
    1100:	99 27       	eor	r25, r25
    1102:	88 27       	eor	r24, r24
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	84 2b       	or	r24, r20
    110a:	95 2b       	or	r25, r21
    110c:	a6 2b       	or	r26, r22
    110e:	b7 2b       	or	r27, r23
    1110:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1114:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    1118:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    111c:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    1120:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0x16>
    1124:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x17>
    1128:	30 97       	sbiw	r30, 0x00	; 0
    112a:	39 f0       	breq	.+14     	; 0x113a <__vector_16+0xb2>
    112c:	6b e0       	ldi	r22, 0x0B	; 11
    112e:	70 e0       	ldi	r23, 0x00	; 0
    1130:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0x16>
    1134:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x17>
    1138:	09 95       	icall
    113a:	0e 94 65 03 	call	0x6ca	; 0x6ca <schedule>
    113e:	ff 91       	pop	r31
    1140:	ef 91       	pop	r30
    1142:	bf 91       	pop	r27
    1144:	af 91       	pop	r26
    1146:	9f 91       	pop	r25
    1148:	8f 91       	pop	r24
    114a:	7f 91       	pop	r23
    114c:	6f 91       	pop	r22
    114e:	5f 91       	pop	r21
    1150:	4f 91       	pop	r20
    1152:	3f 91       	pop	r19
    1154:	2f 91       	pop	r18
    1156:	0f 90       	pop	r0
    1158:	0f be       	out	0x3f, r0	; 63
    115a:	0f 90       	pop	r0
    115c:	1f 90       	pop	r1
    115e:	18 95       	reti

00001160 <__vector_17>:
    1160:	1f 92       	push	r1
    1162:	0f 92       	push	r0
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	0f 92       	push	r0
    1168:	11 24       	eor	r1, r1
    116a:	2f 93       	push	r18
    116c:	3f 93       	push	r19
    116e:	4f 93       	push	r20
    1170:	5f 93       	push	r21
    1172:	6f 93       	push	r22
    1174:	7f 93       	push	r23
    1176:	8f 93       	push	r24
    1178:	9f 93       	push	r25
    117a:	af 93       	push	r26
    117c:	bf 93       	push	r27
    117e:	ef 93       	push	r30
    1180:	ff 93       	push	r31
    1182:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
    1186:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
    118a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    118e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1192:	c9 01       	movw	r24, r18
    1194:	03 2e       	mov	r0, r19
    1196:	00 0c       	add	r0, r0
    1198:	aa 0b       	sbc	r26, r26
    119a:	bb 0b       	sbc	r27, r27
    119c:	dc 01       	movw	r26, r24
    119e:	99 27       	eor	r25, r25
    11a0:	88 27       	eor	r24, r24
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	84 2b       	or	r24, r20
    11a8:	95 2b       	or	r25, r21
    11aa:	a6 2b       	or	r26, r22
    11ac:	b7 2b       	or	r27, r23
    11ae:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    11b2:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    11b6:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    11ba:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    11be:	b0 9b       	sbis	0x16, 0	; 22
    11c0:	1b c0       	rjmp	.+54     	; 0x11f8 <__vector_17+0x98>
    11c2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    11c6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    11ca:	c9 01       	movw	r24, r18
    11cc:	01 96       	adiw	r24, 0x01	; 1
    11ce:	09 2e       	mov	r0, r25
    11d0:	00 0c       	add	r0, r0
    11d2:	aa 0b       	sbc	r26, r26
    11d4:	bb 0b       	sbc	r27, r27
    11d6:	dc 01       	movw	r26, r24
    11d8:	99 27       	eor	r25, r25
    11da:	88 27       	eor	r24, r24
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	70 e0       	ldi	r23, 0x00	; 0
    11e0:	84 2b       	or	r24, r20
    11e2:	95 2b       	or	r25, r21
    11e4:	a6 2b       	or	r26, r22
    11e6:	b7 2b       	or	r27, r23
    11e8:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    11ec:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    11f0:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    11f4:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    11f8:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x18>
    11fc:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x19>
    1200:	30 97       	sbiw	r30, 0x00	; 0
    1202:	39 f0       	breq	.+14     	; 0x1212 <__vector_17+0xb2>
    1204:	6c e0       	ldi	r22, 0x0C	; 12
    1206:	70 e0       	ldi	r23, 0x00	; 0
    1208:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x18>
    120c:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x19>
    1210:	09 95       	icall
    1212:	0e 94 65 03 	call	0x6ca	; 0x6ca <schedule>
    1216:	ff 91       	pop	r31
    1218:	ef 91       	pop	r30
    121a:	bf 91       	pop	r27
    121c:	af 91       	pop	r26
    121e:	9f 91       	pop	r25
    1220:	8f 91       	pop	r24
    1222:	7f 91       	pop	r23
    1224:	6f 91       	pop	r22
    1226:	5f 91       	pop	r21
    1228:	4f 91       	pop	r20
    122a:	3f 91       	pop	r19
    122c:	2f 91       	pop	r18
    122e:	0f 90       	pop	r0
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	0f 90       	pop	r0
    1234:	1f 90       	pop	r1
    1236:	18 95       	reti

00001238 <__vector_18>:
    1238:	1f 92       	push	r1
    123a:	0f 92       	push	r0
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	0f 92       	push	r0
    1240:	11 24       	eor	r1, r1
    1242:	2f 93       	push	r18
    1244:	3f 93       	push	r19
    1246:	4f 93       	push	r20
    1248:	5f 93       	push	r21
    124a:	6f 93       	push	r22
    124c:	7f 93       	push	r23
    124e:	8f 93       	push	r24
    1250:	9f 93       	push	r25
    1252:	af 93       	push	r26
    1254:	bf 93       	push	r27
    1256:	ef 93       	push	r30
    1258:	ff 93       	push	r31
    125a:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
    125e:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
    1262:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1266:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    126a:	c9 01       	movw	r24, r18
    126c:	03 2e       	mov	r0, r19
    126e:	00 0c       	add	r0, r0
    1270:	aa 0b       	sbc	r26, r26
    1272:	bb 0b       	sbc	r27, r27
    1274:	dc 01       	movw	r26, r24
    1276:	99 27       	eor	r25, r25
    1278:	88 27       	eor	r24, r24
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	70 e0       	ldi	r23, 0x00	; 0
    127e:	84 2b       	or	r24, r20
    1280:	95 2b       	or	r25, r21
    1282:	a6 2b       	or	r26, r22
    1284:	b7 2b       	or	r27, r23
    1286:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    128a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    128e:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    1292:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    1296:	b0 9b       	sbis	0x16, 0	; 22
    1298:	1b c0       	rjmp	.+54     	; 0x12d0 <__vector_18+0x98>
    129a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    129e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    12a2:	c9 01       	movw	r24, r18
    12a4:	01 96       	adiw	r24, 0x01	; 1
    12a6:	09 2e       	mov	r0, r25
    12a8:	00 0c       	add	r0, r0
    12aa:	aa 0b       	sbc	r26, r26
    12ac:	bb 0b       	sbc	r27, r27
    12ae:	dc 01       	movw	r26, r24
    12b0:	99 27       	eor	r25, r25
    12b2:	88 27       	eor	r24, r24
    12b4:	60 e0       	ldi	r22, 0x00	; 0
    12b6:	70 e0       	ldi	r23, 0x00	; 0
    12b8:	84 2b       	or	r24, r20
    12ba:	95 2b       	or	r25, r21
    12bc:	a6 2b       	or	r26, r22
    12be:	b7 2b       	or	r27, r23
    12c0:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    12c4:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    12c8:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    12cc:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    12d0:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x1a>
    12d4:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x1b>
    12d8:	30 97       	sbiw	r30, 0x00	; 0
    12da:	39 f0       	breq	.+14     	; 0x12ea <__vector_18+0xb2>
    12dc:	6d e0       	ldi	r22, 0x0D	; 13
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x1a>
    12e4:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x1b>
    12e8:	09 95       	icall
    12ea:	0e 94 65 03 	call	0x6ca	; 0x6ca <schedule>
    12ee:	ff 91       	pop	r31
    12f0:	ef 91       	pop	r30
    12f2:	bf 91       	pop	r27
    12f4:	af 91       	pop	r26
    12f6:	9f 91       	pop	r25
    12f8:	8f 91       	pop	r24
    12fa:	7f 91       	pop	r23
    12fc:	6f 91       	pop	r22
    12fe:	5f 91       	pop	r21
    1300:	4f 91       	pop	r20
    1302:	3f 91       	pop	r19
    1304:	2f 91       	pop	r18
    1306:	0f 90       	pop	r0
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	0f 90       	pop	r0
    130c:	1f 90       	pop	r1
    130e:	18 95       	reti

00001310 <__vector_19>:
    1310:	1f 92       	push	r1
    1312:	0f 92       	push	r0
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	0f 92       	push	r0
    1318:	11 24       	eor	r1, r1
    131a:	2f 93       	push	r18
    131c:	3f 93       	push	r19
    131e:	4f 93       	push	r20
    1320:	5f 93       	push	r21
    1322:	6f 93       	push	r22
    1324:	7f 93       	push	r23
    1326:	8f 93       	push	r24
    1328:	9f 93       	push	r25
    132a:	af 93       	push	r26
    132c:	bf 93       	push	r27
    132e:	ef 93       	push	r30
    1330:	ff 93       	push	r31
    1332:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
    1336:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
    133a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    133e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1342:	c9 01       	movw	r24, r18
    1344:	03 2e       	mov	r0, r19
    1346:	00 0c       	add	r0, r0
    1348:	aa 0b       	sbc	r26, r26
    134a:	bb 0b       	sbc	r27, r27
    134c:	dc 01       	movw	r26, r24
    134e:	99 27       	eor	r25, r25
    1350:	88 27       	eor	r24, r24
    1352:	60 e0       	ldi	r22, 0x00	; 0
    1354:	70 e0       	ldi	r23, 0x00	; 0
    1356:	84 2b       	or	r24, r20
    1358:	95 2b       	or	r25, r21
    135a:	a6 2b       	or	r26, r22
    135c:	b7 2b       	or	r27, r23
    135e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1362:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    1366:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    136a:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    136e:	b0 9b       	sbis	0x16, 0	; 22
    1370:	1b c0       	rjmp	.+54     	; 0x13a8 <__vector_19+0x98>
    1372:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1376:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    137a:	c9 01       	movw	r24, r18
    137c:	01 96       	adiw	r24, 0x01	; 1
    137e:	09 2e       	mov	r0, r25
    1380:	00 0c       	add	r0, r0
    1382:	aa 0b       	sbc	r26, r26
    1384:	bb 0b       	sbc	r27, r27
    1386:	dc 01       	movw	r26, r24
    1388:	99 27       	eor	r25, r25
    138a:	88 27       	eor	r24, r24
    138c:	60 e0       	ldi	r22, 0x00	; 0
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	84 2b       	or	r24, r20
    1392:	95 2b       	or	r25, r21
    1394:	a6 2b       	or	r26, r22
    1396:	b7 2b       	or	r27, r23
    1398:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    139c:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    13a0:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    13a4:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    13a8:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x1c>
    13ac:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x1d>
    13b0:	30 97       	sbiw	r30, 0x00	; 0
    13b2:	39 f0       	breq	.+14     	; 0x13c2 <__vector_19+0xb2>
    13b4:	6e e0       	ldi	r22, 0x0E	; 14
    13b6:	70 e0       	ldi	r23, 0x00	; 0
    13b8:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x1c>
    13bc:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x1d>
    13c0:	09 95       	icall
    13c2:	0e 94 65 03 	call	0x6ca	; 0x6ca <schedule>
    13c6:	ff 91       	pop	r31
    13c8:	ef 91       	pop	r30
    13ca:	bf 91       	pop	r27
    13cc:	af 91       	pop	r26
    13ce:	9f 91       	pop	r25
    13d0:	8f 91       	pop	r24
    13d2:	7f 91       	pop	r23
    13d4:	6f 91       	pop	r22
    13d6:	5f 91       	pop	r21
    13d8:	4f 91       	pop	r20
    13da:	3f 91       	pop	r19
    13dc:	2f 91       	pop	r18
    13de:	0f 90       	pop	r0
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	0f 90       	pop	r0
    13e4:	1f 90       	pop	r1
    13e6:	18 95       	reti

000013e8 <__vector_20>:
    13e8:	1f 92       	push	r1
    13ea:	0f 92       	push	r0
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	0f 92       	push	r0
    13f0:	11 24       	eor	r1, r1
    13f2:	2f 93       	push	r18
    13f4:	3f 93       	push	r19
    13f6:	4f 93       	push	r20
    13f8:	5f 93       	push	r21
    13fa:	6f 93       	push	r22
    13fc:	7f 93       	push	r23
    13fe:	8f 93       	push	r24
    1400:	9f 93       	push	r25
    1402:	af 93       	push	r26
    1404:	bf 93       	push	r27
    1406:	ef 93       	push	r30
    1408:	ff 93       	push	r31
    140a:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
    140e:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
    1412:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1416:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    141a:	c9 01       	movw	r24, r18
    141c:	03 2e       	mov	r0, r19
    141e:	00 0c       	add	r0, r0
    1420:	aa 0b       	sbc	r26, r26
    1422:	bb 0b       	sbc	r27, r27
    1424:	dc 01       	movw	r26, r24
    1426:	99 27       	eor	r25, r25
    1428:	88 27       	eor	r24, r24
    142a:	60 e0       	ldi	r22, 0x00	; 0
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	84 2b       	or	r24, r20
    1430:	95 2b       	or	r25, r21
    1432:	a6 2b       	or	r26, r22
    1434:	b7 2b       	or	r27, r23
    1436:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    143a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    143e:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    1442:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    1446:	b0 9b       	sbis	0x16, 0	; 22
    1448:	1b c0       	rjmp	.+54     	; 0x1480 <__vector_20+0x98>
    144a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    144e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1452:	c9 01       	movw	r24, r18
    1454:	01 96       	adiw	r24, 0x01	; 1
    1456:	09 2e       	mov	r0, r25
    1458:	00 0c       	add	r0, r0
    145a:	aa 0b       	sbc	r26, r26
    145c:	bb 0b       	sbc	r27, r27
    145e:	dc 01       	movw	r26, r24
    1460:	99 27       	eor	r25, r25
    1462:	88 27       	eor	r24, r24
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	84 2b       	or	r24, r20
    146a:	95 2b       	or	r25, r21
    146c:	a6 2b       	or	r26, r22
    146e:	b7 2b       	or	r27, r23
    1470:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1474:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    1478:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    147c:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    1480:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x1e>
    1484:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x1f>
    1488:	30 97       	sbiw	r30, 0x00	; 0
    148a:	39 f0       	breq	.+14     	; 0x149a <__vector_20+0xb2>
    148c:	6f e0       	ldi	r22, 0x0F	; 15
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x1e>
    1494:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x1f>
    1498:	09 95       	icall
    149a:	0e 94 65 03 	call	0x6ca	; 0x6ca <schedule>
    149e:	ff 91       	pop	r31
    14a0:	ef 91       	pop	r30
    14a2:	bf 91       	pop	r27
    14a4:	af 91       	pop	r26
    14a6:	9f 91       	pop	r25
    14a8:	8f 91       	pop	r24
    14aa:	7f 91       	pop	r23
    14ac:	6f 91       	pop	r22
    14ae:	5f 91       	pop	r21
    14b0:	4f 91       	pop	r20
    14b2:	3f 91       	pop	r19
    14b4:	2f 91       	pop	r18
    14b6:	0f 90       	pop	r0
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	0f 90       	pop	r0
    14bc:	1f 90       	pop	r1
    14be:	18 95       	reti

000014c0 <__vector_21>:
    14c0:	1f 92       	push	r1
    14c2:	0f 92       	push	r0
    14c4:	0f b6       	in	r0, 0x3f	; 63
    14c6:	0f 92       	push	r0
    14c8:	11 24       	eor	r1, r1
    14ca:	2f 93       	push	r18
    14cc:	3f 93       	push	r19
    14ce:	4f 93       	push	r20
    14d0:	5f 93       	push	r21
    14d2:	6f 93       	push	r22
    14d4:	7f 93       	push	r23
    14d6:	8f 93       	push	r24
    14d8:	9f 93       	push	r25
    14da:	af 93       	push	r26
    14dc:	bf 93       	push	r27
    14de:	ef 93       	push	r30
    14e0:	ff 93       	push	r31
    14e2:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
    14e6:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
    14ea:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    14ee:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    14f2:	c9 01       	movw	r24, r18
    14f4:	03 2e       	mov	r0, r19
    14f6:	00 0c       	add	r0, r0
    14f8:	aa 0b       	sbc	r26, r26
    14fa:	bb 0b       	sbc	r27, r27
    14fc:	dc 01       	movw	r26, r24
    14fe:	99 27       	eor	r25, r25
    1500:	88 27       	eor	r24, r24
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	70 e0       	ldi	r23, 0x00	; 0
    1506:	84 2b       	or	r24, r20
    1508:	95 2b       	or	r25, r21
    150a:	a6 2b       	or	r26, r22
    150c:	b7 2b       	or	r27, r23
    150e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1512:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    1516:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    151a:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    151e:	b0 9b       	sbis	0x16, 0	; 22
    1520:	1b c0       	rjmp	.+54     	; 0x1558 <__vector_21+0x98>
    1522:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1526:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    152a:	c9 01       	movw	r24, r18
    152c:	01 96       	adiw	r24, 0x01	; 1
    152e:	09 2e       	mov	r0, r25
    1530:	00 0c       	add	r0, r0
    1532:	aa 0b       	sbc	r26, r26
    1534:	bb 0b       	sbc	r27, r27
    1536:	dc 01       	movw	r26, r24
    1538:	99 27       	eor	r25, r25
    153a:	88 27       	eor	r24, r24
    153c:	60 e0       	ldi	r22, 0x00	; 0
    153e:	70 e0       	ldi	r23, 0x00	; 0
    1540:	84 2b       	or	r24, r20
    1542:	95 2b       	or	r25, r21
    1544:	a6 2b       	or	r26, r22
    1546:	b7 2b       	or	r27, r23
    1548:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    154c:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    1550:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    1554:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    1558:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x20>
    155c:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x21>
    1560:	30 97       	sbiw	r30, 0x00	; 0
    1562:	39 f0       	breq	.+14     	; 0x1572 <__vector_21+0xb2>
    1564:	60 e1       	ldi	r22, 0x10	; 16
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x20>
    156c:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x21>
    1570:	09 95       	icall
    1572:	0e 94 65 03 	call	0x6ca	; 0x6ca <schedule>
    1576:	ff 91       	pop	r31
    1578:	ef 91       	pop	r30
    157a:	bf 91       	pop	r27
    157c:	af 91       	pop	r26
    157e:	9f 91       	pop	r25
    1580:	8f 91       	pop	r24
    1582:	7f 91       	pop	r23
    1584:	6f 91       	pop	r22
    1586:	5f 91       	pop	r21
    1588:	4f 91       	pop	r20
    158a:	3f 91       	pop	r19
    158c:	2f 91       	pop	r18
    158e:	0f 90       	pop	r0
    1590:	0f be       	out	0x3f, r0	; 63
    1592:	0f 90       	pop	r0
    1594:	1f 90       	pop	r1
    1596:	18 95       	reti

00001598 <__vector_22>:
    1598:	1f 92       	push	r1
    159a:	0f 92       	push	r0
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	0f 92       	push	r0
    15a0:	11 24       	eor	r1, r1
    15a2:	2f 93       	push	r18
    15a4:	3f 93       	push	r19
    15a6:	4f 93       	push	r20
    15a8:	5f 93       	push	r21
    15aa:	6f 93       	push	r22
    15ac:	7f 93       	push	r23
    15ae:	8f 93       	push	r24
    15b0:	9f 93       	push	r25
    15b2:	af 93       	push	r26
    15b4:	bf 93       	push	r27
    15b6:	ef 93       	push	r30
    15b8:	ff 93       	push	r31
    15ba:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
    15be:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
    15c2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15c6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    15ca:	c9 01       	movw	r24, r18
    15cc:	03 2e       	mov	r0, r19
    15ce:	00 0c       	add	r0, r0
    15d0:	aa 0b       	sbc	r26, r26
    15d2:	bb 0b       	sbc	r27, r27
    15d4:	dc 01       	movw	r26, r24
    15d6:	99 27       	eor	r25, r25
    15d8:	88 27       	eor	r24, r24
    15da:	60 e0       	ldi	r22, 0x00	; 0
    15dc:	70 e0       	ldi	r23, 0x00	; 0
    15de:	84 2b       	or	r24, r20
    15e0:	95 2b       	or	r25, r21
    15e2:	a6 2b       	or	r26, r22
    15e4:	b7 2b       	or	r27, r23
    15e6:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    15ea:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    15ee:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    15f2:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    15f6:	b0 9b       	sbis	0x16, 0	; 22
    15f8:	1b c0       	rjmp	.+54     	; 0x1630 <__vector_22+0x98>
    15fa:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    15fe:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1602:	c9 01       	movw	r24, r18
    1604:	01 96       	adiw	r24, 0x01	; 1
    1606:	09 2e       	mov	r0, r25
    1608:	00 0c       	add	r0, r0
    160a:	aa 0b       	sbc	r26, r26
    160c:	bb 0b       	sbc	r27, r27
    160e:	dc 01       	movw	r26, r24
    1610:	99 27       	eor	r25, r25
    1612:	88 27       	eor	r24, r24
    1614:	60 e0       	ldi	r22, 0x00	; 0
    1616:	70 e0       	ldi	r23, 0x00	; 0
    1618:	84 2b       	or	r24, r20
    161a:	95 2b       	or	r25, r21
    161c:	a6 2b       	or	r26, r22
    161e:	b7 2b       	or	r27, r23
    1620:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <timestamp>
    1624:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <timestamp+0x1>
    1628:	a0 93 3a 01 	sts	0x013A, r26	; 0x80013a <timestamp+0x2>
    162c:	b0 93 3b 01 	sts	0x013B, r27	; 0x80013b <timestamp+0x3>
    1630:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x22>
    1634:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x23>
    1638:	30 97       	sbiw	r30, 0x00	; 0
    163a:	39 f0       	breq	.+14     	; 0x164a <__vector_22+0xb2>
    163c:	61 e1       	ldi	r22, 0x11	; 17
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x22>
    1644:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x23>
    1648:	09 95       	icall
    164a:	0e 94 65 03 	call	0x6ca	; 0x6ca <schedule>
    164e:	ff 91       	pop	r31
    1650:	ef 91       	pop	r30
    1652:	bf 91       	pop	r27
    1654:	af 91       	pop	r26
    1656:	9f 91       	pop	r25
    1658:	8f 91       	pop	r24
    165a:	7f 91       	pop	r23
    165c:	6f 91       	pop	r22
    165e:	5f 91       	pop	r21
    1660:	4f 91       	pop	r20
    1662:	3f 91       	pop	r19
    1664:	2f 91       	pop	r18
    1666:	0f 90       	pop	r0
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	0f 90       	pop	r0
    166c:	1f 90       	pop	r1
    166e:	18 95       	reti

00001670 <enqueueByDeadline>:
    1670:	ef 92       	push	r14
    1672:	ff 92       	push	r15
    1674:	0f 93       	push	r16
    1676:	1f 93       	push	r17
    1678:	cf 93       	push	r28
    167a:	df 93       	push	r29
    167c:	7b 01       	movw	r14, r22
    167e:	eb 01       	movw	r28, r22
    1680:	a8 81       	ld	r26, Y
    1682:	b9 81       	ldd	r27, Y+1	; 0x01
    1684:	10 97       	sbiw	r26, 0x00	; 0
    1686:	61 f1       	breq	.+88     	; 0x16e0 <enqueueByDeadline+0x70>
    1688:	fc 01       	movw	r30, r24
    168a:	06 81       	ldd	r16, Z+6	; 0x06
    168c:	17 81       	ldd	r17, Z+7	; 0x07
    168e:	20 85       	ldd	r18, Z+8	; 0x08
    1690:	31 85       	ldd	r19, Z+9	; 0x09
    1692:	16 96       	adiw	r26, 0x06	; 6
    1694:	4d 91       	ld	r20, X+
    1696:	5d 91       	ld	r21, X+
    1698:	6d 91       	ld	r22, X+
    169a:	7c 91       	ld	r23, X
    169c:	19 97       	sbiw	r26, 0x09	; 9
    169e:	04 17       	cp	r16, r20
    16a0:	15 07       	cpc	r17, r21
    16a2:	26 07       	cpc	r18, r22
    16a4:	37 07       	cpc	r19, r23
    16a6:	14 f4       	brge	.+4      	; 0x16ac <enqueueByDeadline+0x3c>
    16a8:	1b c0       	rjmp	.+54     	; 0x16e0 <enqueueByDeadline+0x70>
    16aa:	df 01       	movw	r26, r30
    16ac:	ed 91       	ld	r30, X+
    16ae:	fc 91       	ld	r31, X
    16b0:	11 97       	sbiw	r26, 0x01	; 1
    16b2:	30 97       	sbiw	r30, 0x00	; 0
    16b4:	49 f0       	breq	.+18     	; 0x16c8 <enqueueByDeadline+0x58>
    16b6:	46 81       	ldd	r20, Z+6	; 0x06
    16b8:	57 81       	ldd	r21, Z+7	; 0x07
    16ba:	60 85       	ldd	r22, Z+8	; 0x08
    16bc:	71 85       	ldd	r23, Z+9	; 0x09
    16be:	04 17       	cp	r16, r20
    16c0:	15 07       	cpc	r17, r21
    16c2:	26 07       	cpc	r18, r22
    16c4:	37 07       	cpc	r19, r23
    16c6:	8c f7       	brge	.-30     	; 0x16aa <enqueueByDeadline+0x3a>
    16c8:	ec 01       	movw	r28, r24
    16ca:	f9 83       	std	Y+1, r31	; 0x01
    16cc:	e8 83       	st	Y, r30
    16ce:	10 97       	sbiw	r26, 0x00	; 0
    16d0:	21 f4       	brne	.+8      	; 0x16da <enqueueByDeadline+0x6a>
    16d2:	f7 01       	movw	r30, r14
    16d4:	91 83       	std	Z+1, r25	; 0x01
    16d6:	80 83       	st	Z, r24
    16d8:	07 c0       	rjmp	.+14     	; 0x16e8 <enqueueByDeadline+0x78>
    16da:	8d 93       	st	X+, r24
    16dc:	9c 93       	st	X, r25
    16de:	04 c0       	rjmp	.+8      	; 0x16e8 <enqueueByDeadline+0x78>
    16e0:	ec 01       	movw	r28, r24
    16e2:	b9 83       	std	Y+1, r27	; 0x01
    16e4:	a8 83       	st	Y, r26
    16e6:	f5 cf       	rjmp	.-22     	; 0x16d2 <enqueueByDeadline+0x62>
    16e8:	df 91       	pop	r29
    16ea:	cf 91       	pop	r28
    16ec:	1f 91       	pop	r17
    16ee:	0f 91       	pop	r16
    16f0:	ff 90       	pop	r15
    16f2:	ef 90       	pop	r14
    16f4:	08 95       	ret

000016f6 <enqueueByBaseline>:
    16f6:	ef 92       	push	r14
    16f8:	ff 92       	push	r15
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	7b 01       	movw	r14, r22
    1704:	eb 01       	movw	r28, r22
    1706:	a8 81       	ld	r26, Y
    1708:	b9 81       	ldd	r27, Y+1	; 0x01
    170a:	10 97       	sbiw	r26, 0x00	; 0
    170c:	61 f1       	breq	.+88     	; 0x1766 <enqueueByBaseline+0x70>
    170e:	fc 01       	movw	r30, r24
    1710:	02 81       	ldd	r16, Z+2	; 0x02
    1712:	13 81       	ldd	r17, Z+3	; 0x03
    1714:	24 81       	ldd	r18, Z+4	; 0x04
    1716:	35 81       	ldd	r19, Z+5	; 0x05
    1718:	12 96       	adiw	r26, 0x02	; 2
    171a:	4d 91       	ld	r20, X+
    171c:	5d 91       	ld	r21, X+
    171e:	6d 91       	ld	r22, X+
    1720:	7c 91       	ld	r23, X
    1722:	15 97       	sbiw	r26, 0x05	; 5
    1724:	04 17       	cp	r16, r20
    1726:	15 07       	cpc	r17, r21
    1728:	26 07       	cpc	r18, r22
    172a:	37 07       	cpc	r19, r23
    172c:	14 f4       	brge	.+4      	; 0x1732 <enqueueByBaseline+0x3c>
    172e:	1b c0       	rjmp	.+54     	; 0x1766 <enqueueByBaseline+0x70>
    1730:	df 01       	movw	r26, r30
    1732:	ed 91       	ld	r30, X+
    1734:	fc 91       	ld	r31, X
    1736:	11 97       	sbiw	r26, 0x01	; 1
    1738:	30 97       	sbiw	r30, 0x00	; 0
    173a:	49 f0       	breq	.+18     	; 0x174e <enqueueByBaseline+0x58>
    173c:	42 81       	ldd	r20, Z+2	; 0x02
    173e:	53 81       	ldd	r21, Z+3	; 0x03
    1740:	64 81       	ldd	r22, Z+4	; 0x04
    1742:	75 81       	ldd	r23, Z+5	; 0x05
    1744:	04 17       	cp	r16, r20
    1746:	15 07       	cpc	r17, r21
    1748:	26 07       	cpc	r18, r22
    174a:	37 07       	cpc	r19, r23
    174c:	8c f7       	brge	.-30     	; 0x1730 <enqueueByBaseline+0x3a>
    174e:	ec 01       	movw	r28, r24
    1750:	f9 83       	std	Y+1, r31	; 0x01
    1752:	e8 83       	st	Y, r30
    1754:	10 97       	sbiw	r26, 0x00	; 0
    1756:	21 f4       	brne	.+8      	; 0x1760 <enqueueByBaseline+0x6a>
    1758:	f7 01       	movw	r30, r14
    175a:	91 83       	std	Z+1, r25	; 0x01
    175c:	80 83       	st	Z, r24
    175e:	07 c0       	rjmp	.+14     	; 0x176e <enqueueByBaseline+0x78>
    1760:	8d 93       	st	X+, r24
    1762:	9c 93       	st	X, r25
    1764:	04 c0       	rjmp	.+8      	; 0x176e <enqueueByBaseline+0x78>
    1766:	ec 01       	movw	r28, r24
    1768:	b9 83       	std	Y+1, r27	; 0x01
    176a:	a8 83       	st	Y, r26
    176c:	f5 cf       	rjmp	.-22     	; 0x1758 <enqueueByBaseline+0x62>
    176e:	df 91       	pop	r29
    1770:	cf 91       	pop	r28
    1772:	1f 91       	pop	r17
    1774:	0f 91       	pop	r16
    1776:	ff 90       	pop	r15
    1778:	ef 90       	pop	r14
    177a:	08 95       	ret

0000177c <dequeue>:
    177c:	dc 01       	movw	r26, r24
    177e:	ed 91       	ld	r30, X+
    1780:	fc 91       	ld	r31, X
    1782:	11 97       	sbiw	r26, 0x01	; 1
    1784:	30 97       	sbiw	r30, 0x00	; 0
    1786:	59 f4       	brne	.+22     	; 0x179e <dequeue+0x22>
    1788:	8f ef       	ldi	r24, 0xFF	; 255
    178a:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    178e:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    1792:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	83 bf       	out	0x33, r24	; 51
    179a:	88 95       	sleep
    179c:	fd cf       	rjmp	.-6      	; 0x1798 <dequeue+0x1c>
    179e:	20 81       	ld	r18, Z
    17a0:	31 81       	ldd	r19, Z+1	; 0x01
    17a2:	2d 93       	st	X+, r18
    17a4:	3c 93       	st	X, r19
    17a6:	cf 01       	movw	r24, r30
    17a8:	08 95       	ret

000017aa <__vector_9>:
    17aa:	1f 92       	push	r1
    17ac:	0f 92       	push	r0
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	0f 92       	push	r0
    17b2:	11 24       	eor	r1, r1
    17b4:	2f 93       	push	r18
    17b6:	3f 93       	push	r19
    17b8:	4f 93       	push	r20
    17ba:	5f 93       	push	r21
    17bc:	6f 93       	push	r22
    17be:	7f 93       	push	r23
    17c0:	8f 93       	push	r24
    17c2:	9f 93       	push	r25
    17c4:	ef 93       	push	r30
    17c6:	ff 93       	push	r31
    17c8:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <overflows>
    17cc:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <overflows+0x1>
    17d0:	01 96       	adiw	r24, 0x01	; 1
    17d2:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <overflows+0x1>
    17d6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <overflows>
    17da:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <timerQ>
    17de:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <timerQ+0x1>
    17e2:	30 97       	sbiw	r30, 0x00	; 0
    17e4:	01 f1       	breq	.+64     	; 0x1826 <__vector_9+0x7c>
    17e6:	42 81       	ldd	r20, Z+2	; 0x02
    17e8:	53 81       	ldd	r21, Z+3	; 0x03
    17ea:	64 81       	ldd	r22, Z+4	; 0x04
    17ec:	75 81       	ldd	r23, Z+5	; 0x05
    17ee:	86 17       	cp	r24, r22
    17f0:	97 07       	cpc	r25, r23
    17f2:	c9 f4       	brne	.+50     	; 0x1826 <__vector_9+0x7c>
    17f4:	ca 01       	movw	r24, r20
    17f6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    17fa:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    17fe:	42 1b       	sub	r20, r18
    1800:	53 0b       	sbc	r21, r19
    1802:	41 30       	cpi	r20, 0x01	; 1
    1804:	51 05       	cpc	r21, r1
    1806:	29 f4       	brne	.+10     	; 0x1812 <__vector_9+0x68>
    1808:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    180c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1810:	01 96       	adiw	r24, 0x01	; 1
    1812:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1816:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    181a:	ef e6       	ldi	r30, 0x6F	; 111
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	82 60       	ori	r24, 0x02	; 2
    1822:	80 83       	st	Z, r24
    1824:	05 c0       	rjmp	.+10     	; 0x1830 <__vector_9+0x86>
    1826:	ef e6       	ldi	r30, 0x6F	; 111
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	8d 7f       	andi	r24, 0xFD	; 253
    182e:	80 83       	st	Z, r24
    1830:	ff 91       	pop	r31
    1832:	ef 91       	pop	r30
    1834:	9f 91       	pop	r25
    1836:	8f 91       	pop	r24
    1838:	7f 91       	pop	r23
    183a:	6f 91       	pop	r22
    183c:	5f 91       	pop	r21
    183e:	4f 91       	pop	r20
    1840:	3f 91       	pop	r19
    1842:	2f 91       	pop	r18
    1844:	0f 90       	pop	r0
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	0f 90       	pop	r0
    184a:	1f 90       	pop	r1
    184c:	18 95       	reti

0000184e <__vector_7>:
    184e:	1f 92       	push	r1
    1850:	0f 92       	push	r0
    1852:	0f b6       	in	r0, 0x3f	; 63
    1854:	0f 92       	push	r0
    1856:	11 24       	eor	r1, r1
    1858:	cf 92       	push	r12
    185a:	df 92       	push	r13
    185c:	ef 92       	push	r14
    185e:	ff 92       	push	r15
    1860:	2f 93       	push	r18
    1862:	3f 93       	push	r19
    1864:	4f 93       	push	r20
    1866:	5f 93       	push	r21
    1868:	6f 93       	push	r22
    186a:	7f 93       	push	r23
    186c:	8f 93       	push	r24
    186e:	9f 93       	push	r25
    1870:	af 93       	push	r26
    1872:	bf 93       	push	r27
    1874:	ef 93       	push	r30
    1876:	ff 93       	push	r31
    1878:	c0 90 36 01 	lds	r12, 0x0136	; 0x800136 <overflows>
    187c:	d0 90 37 01 	lds	r13, 0x0137	; 0x800137 <overflows+0x1>
    1880:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1884:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1888:	b0 99       	sbic	0x16, 0	; 22
    188a:	0f c0       	rjmp	.+30     	; 0x18aa <__vector_7+0x5c>
    188c:	0d 2c       	mov	r0, r13
    188e:	00 0c       	add	r0, r0
    1890:	ee 08       	sbc	r14, r14
    1892:	ff 08       	sbc	r15, r15
    1894:	d6 01       	movw	r26, r12
    1896:	99 27       	eor	r25, r25
    1898:	88 27       	eor	r24, r24
    189a:	69 01       	movw	r12, r18
    189c:	e1 2c       	mov	r14, r1
    189e:	f1 2c       	mov	r15, r1
    18a0:	c8 2a       	or	r12, r24
    18a2:	d9 2a       	or	r13, r25
    18a4:	ea 2a       	or	r14, r26
    18a6:	fb 2a       	or	r15, r27
    18a8:	15 c0       	rjmp	.+42     	; 0x18d4 <__vector_7+0x86>
    18aa:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    18ae:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    18b2:	8f ef       	ldi	r24, 0xFF	; 255
    18b4:	c8 1a       	sub	r12, r24
    18b6:	d8 0a       	sbc	r13, r24
    18b8:	0d 2c       	mov	r0, r13
    18ba:	00 0c       	add	r0, r0
    18bc:	ee 08       	sbc	r14, r14
    18be:	ff 08       	sbc	r15, r15
    18c0:	d6 01       	movw	r26, r12
    18c2:	99 27       	eor	r25, r25
    18c4:	88 27       	eor	r24, r24
    18c6:	69 01       	movw	r12, r18
    18c8:	e1 2c       	mov	r14, r1
    18ca:	f1 2c       	mov	r15, r1
    18cc:	c8 2a       	or	r12, r24
    18ce:	d9 2a       	or	r13, r25
    18d0:	ea 2a       	or	r14, r26
    18d2:	fb 2a       	or	r15, r27
    18d4:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <timerQ>
    18d8:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <timerQ+0x1>
    18dc:	30 97       	sbiw	r30, 0x00	; 0
    18de:	09 f4       	brne	.+2      	; 0x18e2 <__vector_7+0x94>
    18e0:	42 c0       	rjmp	.+132    	; 0x1966 <__vector_7+0x118>
    18e2:	82 81       	ldd	r24, Z+2	; 0x02
    18e4:	93 81       	ldd	r25, Z+3	; 0x03
    18e6:	a4 81       	ldd	r26, Z+4	; 0x04
    18e8:	b5 81       	ldd	r27, Z+5	; 0x05
    18ea:	8c 19       	sub	r24, r12
    18ec:	9d 09       	sbc	r25, r13
    18ee:	ae 09       	sbc	r26, r14
    18f0:	bf 09       	sbc	r27, r15
    18f2:	18 16       	cp	r1, r24
    18f4:	19 06       	cpc	r1, r25
    18f6:	1a 06       	cpc	r1, r26
    18f8:	1b 06       	cpc	r1, r27
    18fa:	ec f1       	brlt	.+122    	; 0x1976 <__vector_7+0x128>
    18fc:	8c e3       	ldi	r24, 0x3C	; 60
    18fe:	91 e0       	ldi	r25, 0x01	; 1
    1900:	0e 94 be 0b 	call	0x177c	; 0x177c <dequeue>
    1904:	6e e3       	ldi	r22, 0x3E	; 62
    1906:	71 e0       	ldi	r23, 0x01	; 1
    1908:	0e 94 38 0b 	call	0x1670	; 0x1670 <enqueueByDeadline>
    190c:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <timerQ>
    1910:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <timerQ+0x1>
    1914:	30 97       	sbiw	r30, 0x00	; 0
    1916:	39 f1       	breq	.+78     	; 0x1966 <__vector_7+0x118>
    1918:	82 81       	ldd	r24, Z+2	; 0x02
    191a:	93 81       	ldd	r25, Z+3	; 0x03
    191c:	a4 81       	ldd	r26, Z+4	; 0x04
    191e:	b5 81       	ldd	r27, Z+5	; 0x05
    1920:	8c 19       	sub	r24, r12
    1922:	9d 09       	sbc	r25, r13
    1924:	ae 09       	sbc	r26, r14
    1926:	bf 09       	sbc	r27, r15
    1928:	18 16       	cp	r1, r24
    192a:	19 06       	cpc	r1, r25
    192c:	1a 06       	cpc	r1, r26
    192e:	1b 06       	cpc	r1, r27
    1930:	2c f7       	brge	.-54     	; 0x18fc <__vector_7+0xae>
    1932:	21 c0       	rjmp	.+66     	; 0x1976 <__vector_7+0x128>
    1934:	9c 01       	movw	r18, r24
    1936:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    193a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    193e:	84 1b       	sub	r24, r20
    1940:	95 0b       	sbc	r25, r21
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	31 f4       	brne	.+12     	; 0x1952 <__vector_7+0x104>
    1946:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    194a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    194e:	2f 5f       	subi	r18, 0xFF	; 255
    1950:	3f 4f       	sbci	r19, 0xFF	; 255
    1952:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1956:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    195a:	ef e6       	ldi	r30, 0x6F	; 111
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	82 60       	ori	r24, 0x02	; 2
    1962:	80 83       	st	Z, r24
    1964:	05 c0       	rjmp	.+10     	; 0x1970 <__vector_7+0x122>
    1966:	ef e6       	ldi	r30, 0x6F	; 111
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	8d 7f       	andi	r24, 0xFD	; 253
    196e:	80 83       	st	Z, r24
    1970:	0e 94 65 03 	call	0x6ca	; 0x6ca <schedule>
    1974:	0c c0       	rjmp	.+24     	; 0x198e <__vector_7+0x140>
    1976:	82 81       	ldd	r24, Z+2	; 0x02
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	a4 81       	ldd	r26, Z+4	; 0x04
    197c:	b5 81       	ldd	r27, Z+5	; 0x05
    197e:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
    1982:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
    1986:	2a 17       	cp	r18, r26
    1988:	3b 07       	cpc	r19, r27
    198a:	69 f7       	brne	.-38     	; 0x1966 <__vector_7+0x118>
    198c:	d3 cf       	rjmp	.-90     	; 0x1934 <__vector_7+0xe6>
    198e:	ff 91       	pop	r31
    1990:	ef 91       	pop	r30
    1992:	bf 91       	pop	r27
    1994:	af 91       	pop	r26
    1996:	9f 91       	pop	r25
    1998:	8f 91       	pop	r24
    199a:	7f 91       	pop	r23
    199c:	6f 91       	pop	r22
    199e:	5f 91       	pop	r21
    19a0:	4f 91       	pop	r20
    19a2:	3f 91       	pop	r19
    19a4:	2f 91       	pop	r18
    19a6:	ff 90       	pop	r15
    19a8:	ef 90       	pop	r14
    19aa:	df 90       	pop	r13
    19ac:	cf 90       	pop	r12
    19ae:	0f 90       	pop	r0
    19b0:	0f be       	out	0x3f, r0	; 63
    19b2:	0f 90       	pop	r0
    19b4:	1f 90       	pop	r1
    19b6:	18 95       	reti

000019b8 <async>:
    19b8:	3f 92       	push	r3
    19ba:	4f 92       	push	r4
    19bc:	5f 92       	push	r5
    19be:	6f 92       	push	r6
    19c0:	7f 92       	push	r7
    19c2:	8f 92       	push	r8
    19c4:	9f 92       	push	r9
    19c6:	af 92       	push	r10
    19c8:	bf 92       	push	r11
    19ca:	cf 92       	push	r12
    19cc:	df 92       	push	r13
    19ce:	ef 92       	push	r14
    19d0:	ff 92       	push	r15
    19d2:	0f 93       	push	r16
    19d4:	1f 93       	push	r17
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	2b 01       	movw	r4, r22
    19dc:	3c 01       	movw	r6, r24
    19de:	49 01       	movw	r8, r18
    19e0:	5a 01       	movw	r10, r20
    19e2:	8f b7       	in	r24, 0x3f	; 63
    19e4:	80 78       	andi	r24, 0x80	; 128
    19e6:	38 2e       	mov	r3, r24
    19e8:	f8 94       	cli
    19ea:	8b e1       	ldi	r24, 0x1B	; 27
    19ec:	91 e0       	ldi	r25, 0x01	; 1
    19ee:	0e 94 be 0b 	call	0x177c	; 0x177c <dequeue>
    19f2:	ec 01       	movw	r28, r24
    19f4:	1b 87       	std	Y+11, r17	; 0x0b
    19f6:	0a 87       	std	Y+10, r16	; 0x0a
    19f8:	fd 86       	std	Y+13, r15	; 0x0d
    19fa:	ec 86       	std	Y+12, r14	; 0x0c
    19fc:	df 86       	std	Y+15, r13	; 0x0f
    19fe:	ce 86       	std	Y+14, r12	; 0x0e
    1a00:	33 20       	and	r3, r3
    1a02:	61 f0       	breq	.+24     	; 0x1a1c <async+0x64>
    1a04:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <current>
    1a08:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <current+0x1>
    1a0c:	02 80       	ldd	r0, Z+2	; 0x02
    1a0e:	f3 81       	ldd	r31, Z+3	; 0x03
    1a10:	e0 2d       	mov	r30, r0
    1a12:	82 81       	ldd	r24, Z+2	; 0x02
    1a14:	93 81       	ldd	r25, Z+3	; 0x03
    1a16:	a4 81       	ldd	r26, Z+4	; 0x04
    1a18:	b5 81       	ldd	r27, Z+5	; 0x05
    1a1a:	08 c0       	rjmp	.+16     	; 0x1a2c <async+0x74>
    1a1c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <timestamp>
    1a20:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <timestamp+0x1>
    1a24:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <timestamp+0x2>
    1a28:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <timestamp+0x3>
    1a2c:	48 0e       	add	r4, r24
    1a2e:	59 1e       	adc	r5, r25
    1a30:	6a 1e       	adc	r6, r26
    1a32:	7b 1e       	adc	r7, r27
    1a34:	4a 82       	std	Y+2, r4	; 0x02
    1a36:	5b 82       	std	Y+3, r5	; 0x03
    1a38:	6c 82       	std	Y+4, r6	; 0x04
    1a3a:	7d 82       	std	Y+5, r7	; 0x05
    1a3c:	18 14       	cp	r1, r8
    1a3e:	19 04       	cpc	r1, r9
    1a40:	1a 04       	cpc	r1, r10
    1a42:	1b 04       	cpc	r1, r11
    1a44:	44 f0       	brlt	.+16     	; 0x1a56 <async+0x9e>
    1a46:	0f 2e       	mov	r0, r31
    1a48:	88 24       	eor	r8, r8
    1a4a:	8a 94       	dec	r8
    1a4c:	98 2c       	mov	r9, r8
    1a4e:	a8 2c       	mov	r10, r8
    1a50:	ff e7       	ldi	r31, 0x7F	; 127
    1a52:	bf 2e       	mov	r11, r31
    1a54:	f0 2d       	mov	r31, r0
    1a56:	84 0c       	add	r8, r4
    1a58:	95 1c       	adc	r9, r5
    1a5a:	a6 1c       	adc	r10, r6
    1a5c:	b7 1c       	adc	r11, r7
    1a5e:	8e 82       	std	Y+6, r8	; 0x06
    1a60:	9f 82       	std	Y+7, r9	; 0x07
    1a62:	a8 86       	std	Y+8, r10	; 0x08
    1a64:	b9 86       	std	Y+9, r11	; 0x09
    1a66:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <overflows>
    1a6a:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <overflows+0x1>
    1a6e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a72:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1a76:	b0 99       	sbic	0x16, 0	; 22
    1a78:	0e c0       	rjmp	.+28     	; 0x1a96 <async+0xde>
    1a7a:	09 2e       	mov	r0, r25
    1a7c:	00 0c       	add	r0, r0
    1a7e:	aa 0b       	sbc	r26, r26
    1a80:	bb 0b       	sbc	r27, r27
    1a82:	dc 01       	movw	r26, r24
    1a84:	99 27       	eor	r25, r25
    1a86:	88 27       	eor	r24, r24
    1a88:	60 e0       	ldi	r22, 0x00	; 0
    1a8a:	70 e0       	ldi	r23, 0x00	; 0
    1a8c:	84 2b       	or	r24, r20
    1a8e:	95 2b       	or	r25, r21
    1a90:	a6 2b       	or	r26, r22
    1a92:	b7 2b       	or	r27, r23
    1a94:	13 c0       	rjmp	.+38     	; 0x1abc <async+0x104>
    1a96:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1a9a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	09 2e       	mov	r0, r25
    1aa2:	00 0c       	add	r0, r0
    1aa4:	aa 0b       	sbc	r26, r26
    1aa6:	bb 0b       	sbc	r27, r27
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	99 27       	eor	r25, r25
    1aac:	88 27       	eor	r24, r24
    1aae:	a9 01       	movw	r20, r18
    1ab0:	60 e0       	ldi	r22, 0x00	; 0
    1ab2:	70 e0       	ldi	r23, 0x00	; 0
    1ab4:	84 2b       	or	r24, r20
    1ab6:	95 2b       	or	r25, r21
    1ab8:	a6 2b       	or	r26, r22
    1aba:	b7 2b       	or	r27, r23
    1abc:	48 1a       	sub	r4, r24
    1abe:	59 0a       	sbc	r5, r25
    1ac0:	6a 0a       	sbc	r6, r26
    1ac2:	7b 0a       	sbc	r7, r27
    1ac4:	14 14       	cp	r1, r4
    1ac6:	15 04       	cpc	r1, r5
    1ac8:	16 04       	cpc	r1, r6
    1aca:	17 04       	cpc	r1, r7
    1acc:	ac f5       	brge	.+106    	; 0x1b38 <async+0x180>
    1ace:	6c e3       	ldi	r22, 0x3C	; 60
    1ad0:	71 e0       	ldi	r23, 0x01	; 1
    1ad2:	ce 01       	movw	r24, r28
    1ad4:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <enqueueByBaseline>
    1ad8:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <timerQ>
    1adc:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <timerQ+0x1>
    1ae0:	30 97       	sbiw	r30, 0x00	; 0
    1ae2:	21 f1       	breq	.+72     	; 0x1b2c <async+0x174>
    1ae4:	82 81       	ldd	r24, Z+2	; 0x02
    1ae6:	93 81       	ldd	r25, Z+3	; 0x03
    1ae8:	a4 81       	ldd	r26, Z+4	; 0x04
    1aea:	b5 81       	ldd	r27, Z+5	; 0x05
    1aec:	20 91 36 01 	lds	r18, 0x0136	; 0x800136 <overflows>
    1af0:	30 91 37 01 	lds	r19, 0x0137	; 0x800137 <overflows+0x1>
    1af4:	2a 17       	cp	r18, r26
    1af6:	3b 07       	cpc	r19, r27
    1af8:	c9 f4       	brne	.+50     	; 0x1b2c <async+0x174>
    1afa:	9c 01       	movw	r18, r24
    1afc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b00:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b04:	84 1b       	sub	r24, r20
    1b06:	95 0b       	sbc	r25, r21
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	31 f4       	brne	.+12     	; 0x1b18 <async+0x160>
    1b0c:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
    1b10:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
    1b14:	2f 5f       	subi	r18, 0xFF	; 255
    1b16:	3f 4f       	sbci	r19, 0xFF	; 255
    1b18:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    1b1c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
    1b20:	ef e6       	ldi	r30, 0x6F	; 111
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	82 60       	ori	r24, 0x02	; 2
    1b28:	80 83       	st	Z, r24
    1b2a:	41 c0       	rjmp	.+130    	; 0x1bae <async+0x1f6>
    1b2c:	ef e6       	ldi	r30, 0x6F	; 111
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	8d 7f       	andi	r24, 0xFD	; 253
    1b34:	80 83       	st	Z, r24
    1b36:	3b c0       	rjmp	.+118    	; 0x1bae <async+0x1f6>
    1b38:	6e e3       	ldi	r22, 0x3E	; 62
    1b3a:	71 e0       	ldi	r23, 0x01	; 1
    1b3c:	ce 01       	movw	r24, r28
    1b3e:	0e 94 38 0b 	call	0x1670	; 0x1670 <enqueueByDeadline>
    1b42:	33 20       	and	r3, r3
    1b44:	b9 f1       	breq	.+110    	; 0x1bb4 <async+0x1fc>
    1b46:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <threadPool>
    1b4a:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <threadPool+0x1>
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	81 f1       	breq	.+96     	; 0x1bb2 <async+0x1fa>
    1b52:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <activeStack>
    1b56:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <activeStack+0x1>
    1b5a:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <msgQ>
    1b5e:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <msgQ+0x1>
    1b62:	02 81       	ldd	r16, Z+2	; 0x02
    1b64:	13 81       	ldd	r17, Z+3	; 0x03
    1b66:	d9 01       	movw	r26, r18
    1b68:	16 96       	adiw	r26, 0x06	; 6
    1b6a:	4d 91       	ld	r20, X+
    1b6c:	5d 91       	ld	r21, X+
    1b6e:	6d 91       	ld	r22, X+
    1b70:	7c 91       	ld	r23, X
    1b72:	19 97       	sbiw	r26, 0x09	; 9
    1b74:	d8 01       	movw	r26, r16
    1b76:	16 96       	adiw	r26, 0x06	; 6
    1b78:	0d 91       	ld	r16, X+
    1b7a:	1d 91       	ld	r17, X+
    1b7c:	2d 91       	ld	r18, X+
    1b7e:	3c 91       	ld	r19, X
    1b80:	19 97       	sbiw	r26, 0x09	; 9
    1b82:	40 1b       	sub	r20, r16
    1b84:	51 0b       	sbc	r21, r17
    1b86:	62 0b       	sbc	r22, r18
    1b88:	73 0b       	sbc	r23, r19
    1b8a:	9a f4       	brpl	.+38     	; 0x1bb2 <async+0x1fa>
    1b8c:	dc 01       	movw	r26, r24
    1b8e:	2d 91       	ld	r18, X+
    1b90:	3c 91       	ld	r19, X
    1b92:	11 97       	sbiw	r26, 0x01	; 1
    1b94:	30 93 1a 01 	sts	0x011A, r19	; 0x80011a <threadPool+0x1>
    1b98:	20 93 19 01 	sts	0x0119, r18	; 0x800119 <threadPool>
    1b9c:	ed 93       	st	X+, r30
    1b9e:	fc 93       	st	X, r31
    1ba0:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <activeStack+0x1>
    1ba4:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <activeStack>
    1ba8:	0e 94 45 03 	call	0x68a	; 0x68a <dispatch>
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <async+0x1fa>
    1bae:	33 20       	and	r3, r3
    1bb0:	09 f0       	breq	.+2      	; 0x1bb4 <async+0x1fc>
    1bb2:	78 94       	sei
    1bb4:	ce 01       	movw	r24, r28
    1bb6:	df 91       	pop	r29
    1bb8:	cf 91       	pop	r28
    1bba:	1f 91       	pop	r17
    1bbc:	0f 91       	pop	r16
    1bbe:	ff 90       	pop	r15
    1bc0:	ef 90       	pop	r14
    1bc2:	df 90       	pop	r13
    1bc4:	cf 90       	pop	r12
    1bc6:	bf 90       	pop	r11
    1bc8:	af 90       	pop	r10
    1bca:	9f 90       	pop	r9
    1bcc:	8f 90       	pop	r8
    1bce:	7f 90       	pop	r7
    1bd0:	6f 90       	pop	r6
    1bd2:	5f 90       	pop	r5
    1bd4:	4f 90       	pop	r4
    1bd6:	3f 90       	pop	r3
    1bd8:	08 95       	ret

00001bda <sync>:
    1bda:	cf 92       	push	r12
    1bdc:	df 92       	push	r13
    1bde:	ef 92       	push	r14
    1be0:	ff 92       	push	r15
    1be2:	0f 93       	push	r16
    1be4:	1f 93       	push	r17
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	ec 01       	movw	r28, r24
    1bec:	7b 01       	movw	r14, r22
    1bee:	6a 01       	movw	r12, r20
    1bf0:	1f b7       	in	r17, 0x3f	; 63
    1bf2:	10 78       	andi	r17, 0x80	; 128
    1bf4:	f8 94       	cli
    1bf6:	a8 81       	ld	r26, Y
    1bf8:	b9 81       	ldd	r27, Y+1	; 0x01
    1bfa:	10 97       	sbiw	r26, 0x00	; 0
    1bfc:	61 f1       	breq	.+88     	; 0x1c56 <sync+0x7c>
    1bfe:	14 96       	adiw	r26, 0x04	; 4
    1c00:	ed 91       	ld	r30, X+
    1c02:	fc 91       	ld	r31, X
    1c04:	15 97       	sbiw	r26, 0x05	; 5
    1c06:	30 97       	sbiw	r30, 0x00	; 0
    1c08:	41 f0       	breq	.+16     	; 0x1c1a <sync+0x40>
    1c0a:	a0 81       	ld	r26, Z
    1c0c:	b1 81       	ldd	r27, Z+1	; 0x01
    1c0e:	14 96       	adiw	r26, 0x04	; 4
    1c10:	ed 91       	ld	r30, X+
    1c12:	fc 91       	ld	r31, X
    1c14:	15 97       	sbiw	r26, 0x05	; 5
    1c16:	30 97       	sbiw	r30, 0x00	; 0
    1c18:	c1 f7       	brne	.-16     	; 0x1c0a <sync+0x30>
    1c1a:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <current>
    1c1e:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <current+0x1>
    1c22:	2a 17       	cp	r18, r26
    1c24:	3b 07       	cpc	r19, r27
    1c26:	21 f0       	breq	.+8      	; 0x1c30 <sync+0x56>
    1c28:	11 23       	and	r17, r17
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <sync+0x54>
    1c2c:	3d c0       	rjmp	.+122    	; 0x1ca8 <sync+0xce>
    1c2e:	07 c0       	rjmp	.+14     	; 0x1c3e <sync+0x64>
    1c30:	11 23       	and	r17, r17
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <sync+0x5c>
    1c34:	3c c0       	rjmp	.+120    	; 0x1cae <sync+0xd4>
    1c36:	78 94       	sei
    1c38:	8f ef       	ldi	r24, 0xFF	; 255
    1c3a:	9f ef       	ldi	r25, 0xFF	; 255
    1c3c:	52 c0       	rjmp	.+164    	; 0x1ce2 <sync+0x108>
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	9b 81       	ldd	r25, Y+3	; 0x03
    1c42:	00 97       	sbiw	r24, 0x00	; 0
    1c44:	d1 f1       	breq	.+116    	; 0x1cba <sync+0xe0>
    1c46:	fc 01       	movw	r30, r24
    1c48:	15 82       	std	Z+5, r1	; 0x05
    1c4a:	14 82       	std	Z+4, r1	; 0x04
    1c4c:	36 c0       	rjmp	.+108    	; 0x1cba <sync+0xe0>
    1c4e:	78 94       	sei
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	46 c0       	rjmp	.+140    	; 0x1ce2 <sync+0x108>
    1c56:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <current>
    1c5a:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <current+0x1>
    1c5e:	99 83       	std	Y+1, r25	; 0x01
    1c60:	88 83       	st	Y, r24
    1c62:	11 23       	and	r17, r17
    1c64:	29 f0       	breq	.+10     	; 0x1c70 <sync+0x96>
    1c66:	8a 81       	ldd	r24, Y+2	; 0x02
    1c68:	9b 81       	ldd	r25, Y+3	; 0x03
    1c6a:	01 97       	sbiw	r24, 0x01	; 1
    1c6c:	09 f0       	breq	.+2      	; 0x1c70 <sync+0x96>
    1c6e:	78 94       	sei
    1c70:	b6 01       	movw	r22, r12
    1c72:	ce 01       	movw	r24, r28
    1c74:	f7 01       	movw	r30, r14
    1c76:	09 95       	icall
    1c78:	f8 2e       	mov	r15, r24
    1c7a:	09 2f       	mov	r16, r25
    1c7c:	8f b7       	in	r24, 0x3f	; 63
    1c7e:	f8 94       	cli
    1c80:	19 82       	std	Y+1, r1	; 0x01
    1c82:	18 82       	st	Y, r1
    1c84:	8a 81       	ldd	r24, Y+2	; 0x02
    1c86:	9b 81       	ldd	r25, Y+3	; 0x03
    1c88:	82 30       	cpi	r24, 0x02	; 2
    1c8a:	91 05       	cpc	r25, r1
    1c8c:	38 f0       	brcs	.+14     	; 0x1c9c <sync+0xc2>
    1c8e:	1b 82       	std	Y+3, r1	; 0x03
    1c90:	1a 82       	std	Y+2, r1	; 0x02
    1c92:	fc 01       	movw	r30, r24
    1c94:	15 82       	std	Z+5, r1	; 0x05
    1c96:	14 82       	std	Z+4, r1	; 0x04
    1c98:	0e 94 45 03 	call	0x68a	; 0x68a <dispatch>
    1c9c:	11 23       	and	r17, r17
    1c9e:	51 f0       	breq	.+20     	; 0x1cb4 <sync+0xda>
    1ca0:	78 94       	sei
    1ca2:	8f 2d       	mov	r24, r15
    1ca4:	90 2f       	mov	r25, r16
    1ca6:	1d c0       	rjmp	.+58     	; 0x1ce2 <sync+0x108>
    1ca8:	8f ef       	ldi	r24, 0xFF	; 255
    1caa:	9f ef       	ldi	r25, 0xFF	; 255
    1cac:	1a c0       	rjmp	.+52     	; 0x1ce2 <sync+0x108>
    1cae:	8f ef       	ldi	r24, 0xFF	; 255
    1cb0:	9f ef       	ldi	r25, 0xFF	; 255
    1cb2:	17 c0       	rjmp	.+46     	; 0x1ce2 <sync+0x108>
    1cb4:	8f 2d       	mov	r24, r15
    1cb6:	90 2f       	mov	r25, r16
    1cb8:	14 c0       	rjmp	.+40     	; 0x1ce2 <sync+0x108>
    1cba:	3b 83       	std	Y+3, r19	; 0x03
    1cbc:	2a 83       	std	Y+2, r18	; 0x02
    1cbe:	f9 01       	movw	r30, r18
    1cc0:	d5 83       	std	Z+5, r29	; 0x05
    1cc2:	c4 83       	std	Z+4, r28	; 0x04
    1cc4:	cd 01       	movw	r24, r26
    1cc6:	0e 94 45 03 	call	0x68a	; 0x68a <dispatch>
    1cca:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <current>
    1cce:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <current+0x1>
    1cd2:	82 81       	ldd	r24, Z+2	; 0x02
    1cd4:	93 81       	ldd	r25, Z+3	; 0x03
    1cd6:	89 2b       	or	r24, r25
    1cd8:	09 f4       	brne	.+2      	; 0x1cdc <sync+0x102>
    1cda:	b9 cf       	rjmp	.-142    	; 0x1c4e <sync+0x74>
    1cdc:	f9 83       	std	Y+1, r31	; 0x01
    1cde:	e8 83       	st	Y, r30
    1ce0:	c2 cf       	rjmp	.-124    	; 0x1c66 <sync+0x8c>
    1ce2:	df 91       	pop	r29
    1ce4:	cf 91       	pop	r28
    1ce6:	1f 91       	pop	r17
    1ce8:	0f 91       	pop	r16
    1cea:	ff 90       	pop	r15
    1cec:	ef 90       	pop	r14
    1cee:	df 90       	pop	r13
    1cf0:	cf 90       	pop	r12
    1cf2:	08 95       	ret

00001cf4 <run>:
    1cf4:	00 91 15 01 	lds	r16, 0x0115	; 0x800115 <current>
    1cf8:	10 91 16 01 	lds	r17, 0x0116	; 0x800116 <current+0x1>
    1cfc:	8e e3       	ldi	r24, 0x3E	; 62
    1cfe:	91 e0       	ldi	r25, 0x01	; 1
    1d00:	0e 94 be 0b 	call	0x177c	; 0x177c <dequeue>
    1d04:	ec 01       	movw	r28, r24
    1d06:	d8 01       	movw	r26, r16
    1d08:	13 96       	adiw	r26, 0x03	; 3
    1d0a:	9c 93       	st	X, r25
    1d0c:	8e 93       	st	-X, r24
    1d0e:	12 97       	sbiw	r26, 0x02	; 2
    1d10:	78 94       	sei
    1d12:	4e 85       	ldd	r20, Y+14	; 0x0e
    1d14:	5f 85       	ldd	r21, Y+15	; 0x0f
    1d16:	6c 85       	ldd	r22, Y+12	; 0x0c
    1d18:	7d 85       	ldd	r23, Y+13	; 0x0d
    1d1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1d1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1d1e:	0e 94 ed 0d 	call	0x1bda	; 0x1bda <sync>
    1d22:	8f b7       	in	r24, 0x3f	; 63
    1d24:	f8 94       	cli
    1d26:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <msgPool>
    1d2a:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <msgPool+0x1>
    1d2e:	99 83       	std	Y+1, r25	; 0x01
    1d30:	88 83       	st	Y, r24
    1d32:	d0 93 1c 01 	sts	0x011C, r29	; 0x80011c <msgPool+0x1>
    1d36:	c0 93 1b 01 	sts	0x011B, r28	; 0x80011b <msgPool>
    1d3a:	e0 91 17 01 	lds	r30, 0x0117	; 0x800117 <activeStack>
    1d3e:	f0 91 18 01 	lds	r31, 0x0118	; 0x800118 <activeStack+0x1>
    1d42:	00 81       	ld	r16, Z
    1d44:	11 81       	ldd	r17, Z+1	; 0x01
    1d46:	e8 01       	movw	r28, r16
    1d48:	2a 81       	ldd	r18, Y+2	; 0x02
    1d4a:	3b 81       	ldd	r19, Y+3	; 0x03
    1d4c:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <msgQ>
    1d50:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <msgQ+0x1>
    1d54:	10 97       	sbiw	r26, 0x00	; 0
    1d56:	c1 f0       	breq	.+48     	; 0x1d88 <run+0x94>
    1d58:	21 15       	cp	r18, r1
    1d5a:	31 05       	cpc	r19, r1
    1d5c:	59 f2       	breq	.-106    	; 0x1cf4 <run>
    1d5e:	16 96       	adiw	r26, 0x06	; 6
    1d60:	8d 91       	ld	r24, X+
    1d62:	9d 91       	ld	r25, X+
    1d64:	0d 90       	ld	r0, X+
    1d66:	bc 91       	ld	r27, X
    1d68:	a0 2d       	mov	r26, r0
    1d6a:	e9 01       	movw	r28, r18
    1d6c:	4e 81       	ldd	r20, Y+6	; 0x06
    1d6e:	5f 81       	ldd	r21, Y+7	; 0x07
    1d70:	68 85       	ldd	r22, Y+8	; 0x08
    1d72:	79 85       	ldd	r23, Y+9	; 0x09
    1d74:	84 1b       	sub	r24, r20
    1d76:	95 0b       	sbc	r25, r21
    1d78:	a6 0b       	sbc	r26, r22
    1d7a:	b7 0b       	sbc	r27, r23
    1d7c:	18 16       	cp	r1, r24
    1d7e:	19 06       	cpc	r1, r25
    1d80:	1a 06       	cpc	r1, r26
    1d82:	1b 06       	cpc	r1, r27
    1d84:	0c f0       	brlt	.+2      	; 0x1d88 <run+0x94>
    1d86:	b6 cf       	rjmp	.-148    	; 0x1cf4 <run>
    1d88:	10 93 18 01 	sts	0x0118, r17	; 0x800118 <activeStack+0x1>
    1d8c:	00 93 17 01 	sts	0x0117, r16	; 0x800117 <activeStack>
    1d90:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <threadPool>
    1d94:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <threadPool+0x1>
    1d98:	91 83       	std	Z+1, r25	; 0x01
    1d9a:	80 83       	st	Z, r24
    1d9c:	f0 93 1a 01 	sts	0x011A, r31	; 0x80011a <threadPool+0x1>
    1da0:	e0 93 19 01 	sts	0x0119, r30	; 0x800119 <threadPool>
    1da4:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <activeStack>
    1da8:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <activeStack+0x1>
    1dac:	14 96       	adiw	r26, 0x04	; 4
    1dae:	ed 91       	ld	r30, X+
    1db0:	fc 91       	ld	r31, X
    1db2:	15 97       	sbiw	r26, 0x05	; 5
    1db4:	30 97       	sbiw	r30, 0x00	; 0
    1db6:	41 f0       	breq	.+16     	; 0x1dc8 <run+0xd4>
    1db8:	a0 81       	ld	r26, Z
    1dba:	b1 81       	ldd	r27, Z+1	; 0x01
    1dbc:	14 96       	adiw	r26, 0x04	; 4
    1dbe:	ed 91       	ld	r30, X+
    1dc0:	fc 91       	ld	r31, X
    1dc2:	15 97       	sbiw	r26, 0x05	; 5
    1dc4:	30 97       	sbiw	r30, 0x00	; 0
    1dc6:	c1 f7       	brne	.-16     	; 0x1db8 <run+0xc4>
    1dc8:	cd 01       	movw	r24, r26
    1dca:	0e 94 45 03 	call	0x68a	; 0x68a <dispatch>
    1dce:	92 cf       	rjmp	.-220    	; 0x1cf4 <run>

00001dd0 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    1dd0:	42 31       	cpi	r20, 0x12	; 18
    1dd2:	b8 f4       	brcc	.+46     	; 0x1e02 <install+0x32>
        char status;
        DISABLE(status);
    1dd4:	2f b7       	in	r18, 0x3f	; 63
    1dd6:	f8 94       	cli
        otable[i] = obj;
    1dd8:	50 e0       	ldi	r21, 0x00	; 0
    1dda:	44 0f       	add	r20, r20
    1ddc:	55 1f       	adc	r21, r21
    1dde:	fa 01       	movw	r30, r20
    1de0:	e0 5c       	subi	r30, 0xC0	; 192
    1de2:	fe 4f       	sbci	r31, 0xFE	; 254
    1de4:	91 83       	std	Z+1, r25	; 0x01
    1de6:	80 83       	st	Z, r24
        mtable[i] = m;
    1de8:	fa 01       	movw	r30, r20
    1dea:	e8 52       	subi	r30, 0x28	; 40
    1dec:	fe 4f       	sbci	r31, 0xFE	; 254
    1dee:	71 83       	std	Z+1, r23	; 0x01
    1df0:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    1df2:	41 e0       	ldi	r20, 0x01	; 1
    1df4:	50 e0       	ldi	r21, 0x00	; 0
    1df6:	fc 01       	movw	r30, r24
    1df8:	53 83       	std	Z+3, r21	; 0x03
    1dfa:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    1dfc:	22 23       	and	r18, r18
    1dfe:	0c f4       	brge	.+2      	; 0x1e02 <install+0x32>
    1e00:	78 94       	sei
    1e02:	08 95       	ret

00001e04 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    1e04:	8c 01       	movw	r16, r24
    1e06:	7b 01       	movw	r14, r22
    1e08:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    1e0a:	8f b7       	in	r24, 0x3f	; 63
    1e0c:	f8 94       	cli
    initialize();
    1e0e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <initialize>
    ENABLE(1);
    1e12:	78 94       	sei
    if (m != NULL)
    1e14:	e1 14       	cp	r14, r1
    1e16:	f1 04       	cpc	r15, r1
    1e18:	41 f0       	breq	.+16     	; 0x1e2a <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    1e1a:	20 e0       	ldi	r18, 0x00	; 0
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	a9 01       	movw	r20, r18
    1e20:	60 e0       	ldi	r22, 0x00	; 0
    1e22:	70 e0       	ldi	r23, 0x00	; 0
    1e24:	cb 01       	movw	r24, r22
    1e26:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <async>
    DISABLE(status);
    1e2a:	8f b7       	in	r24, 0x3f	; 63
    1e2c:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    1e2e:	0e 94 65 03 	call	0x6ca	; 0x6ca <schedule>
    ENABLE(1);
    1e32:	78 94       	sei
    while (1) {
        SLEEP();
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	83 bf       	out	0x33, r24	; 51
    1e38:	88 95       	sleep
    1e3a:	fd cf       	rjmp	.-6      	; 0x1e36 <tinytimber+0x32>

00001e3c <__divmodsi4>:
    1e3c:	05 2e       	mov	r0, r21
    1e3e:	97 fb       	bst	r25, 7
    1e40:	1e f4       	brtc	.+6      	; 0x1e48 <__divmodsi4+0xc>
    1e42:	00 94       	com	r0
    1e44:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <__negsi2>
    1e48:	57 fd       	sbrc	r21, 7
    1e4a:	07 d0       	rcall	.+14     	; 0x1e5a <__divmodsi4_neg2>
    1e4c:	0e 94 3d 0f 	call	0x1e7a	; 0x1e7a <__udivmodsi4>
    1e50:	07 fc       	sbrc	r0, 7
    1e52:	03 d0       	rcall	.+6      	; 0x1e5a <__divmodsi4_neg2>
    1e54:	4e f4       	brtc	.+18     	; 0x1e68 <__divmodsi4_exit>
    1e56:	0c 94 35 0f 	jmp	0x1e6a	; 0x1e6a <__negsi2>

00001e5a <__divmodsi4_neg2>:
    1e5a:	50 95       	com	r21
    1e5c:	40 95       	com	r20
    1e5e:	30 95       	com	r19
    1e60:	21 95       	neg	r18
    1e62:	3f 4f       	sbci	r19, 0xFF	; 255
    1e64:	4f 4f       	sbci	r20, 0xFF	; 255
    1e66:	5f 4f       	sbci	r21, 0xFF	; 255

00001e68 <__divmodsi4_exit>:
    1e68:	08 95       	ret

00001e6a <__negsi2>:
    1e6a:	90 95       	com	r25
    1e6c:	80 95       	com	r24
    1e6e:	70 95       	com	r23
    1e70:	61 95       	neg	r22
    1e72:	7f 4f       	sbci	r23, 0xFF	; 255
    1e74:	8f 4f       	sbci	r24, 0xFF	; 255
    1e76:	9f 4f       	sbci	r25, 0xFF	; 255
    1e78:	08 95       	ret

00001e7a <__udivmodsi4>:
    1e7a:	a1 e2       	ldi	r26, 0x21	; 33
    1e7c:	1a 2e       	mov	r1, r26
    1e7e:	aa 1b       	sub	r26, r26
    1e80:	bb 1b       	sub	r27, r27
    1e82:	fd 01       	movw	r30, r26
    1e84:	0d c0       	rjmp	.+26     	; 0x1ea0 <__udivmodsi4_ep>

00001e86 <__udivmodsi4_loop>:
    1e86:	aa 1f       	adc	r26, r26
    1e88:	bb 1f       	adc	r27, r27
    1e8a:	ee 1f       	adc	r30, r30
    1e8c:	ff 1f       	adc	r31, r31
    1e8e:	a2 17       	cp	r26, r18
    1e90:	b3 07       	cpc	r27, r19
    1e92:	e4 07       	cpc	r30, r20
    1e94:	f5 07       	cpc	r31, r21
    1e96:	20 f0       	brcs	.+8      	; 0x1ea0 <__udivmodsi4_ep>
    1e98:	a2 1b       	sub	r26, r18
    1e9a:	b3 0b       	sbc	r27, r19
    1e9c:	e4 0b       	sbc	r30, r20
    1e9e:	f5 0b       	sbc	r31, r21

00001ea0 <__udivmodsi4_ep>:
    1ea0:	66 1f       	adc	r22, r22
    1ea2:	77 1f       	adc	r23, r23
    1ea4:	88 1f       	adc	r24, r24
    1ea6:	99 1f       	adc	r25, r25
    1ea8:	1a 94       	dec	r1
    1eaa:	69 f7       	brne	.-38     	; 0x1e86 <__udivmodsi4_loop>
    1eac:	60 95       	com	r22
    1eae:	70 95       	com	r23
    1eb0:	80 95       	com	r24
    1eb2:	90 95       	com	r25
    1eb4:	9b 01       	movw	r18, r22
    1eb6:	ac 01       	movw	r20, r24
    1eb8:	bd 01       	movw	r22, r26
    1eba:	cf 01       	movw	r24, r30
    1ebc:	08 95       	ret

00001ebe <setjmp>:
    1ebe:	dc 01       	movw	r26, r24
    1ec0:	2d 92       	st	X+, r2
    1ec2:	3d 92       	st	X+, r3
    1ec4:	4d 92       	st	X+, r4
    1ec6:	5d 92       	st	X+, r5
    1ec8:	6d 92       	st	X+, r6
    1eca:	7d 92       	st	X+, r7
    1ecc:	8d 92       	st	X+, r8
    1ece:	9d 92       	st	X+, r9
    1ed0:	ad 92       	st	X+, r10
    1ed2:	bd 92       	st	X+, r11
    1ed4:	cd 92       	st	X+, r12
    1ed6:	dd 92       	st	X+, r13
    1ed8:	ed 92       	st	X+, r14
    1eda:	fd 92       	st	X+, r15
    1edc:	0d 93       	st	X+, r16
    1ede:	1d 93       	st	X+, r17
    1ee0:	cd 93       	st	X+, r28
    1ee2:	dd 93       	st	X+, r29
    1ee4:	ff 91       	pop	r31
    1ee6:	ef 91       	pop	r30
    1ee8:	8d b7       	in	r24, 0x3d	; 61
    1eea:	8d 93       	st	X+, r24
    1eec:	8e b7       	in	r24, 0x3e	; 62
    1eee:	8d 93       	st	X+, r24
    1ef0:	8f b7       	in	r24, 0x3f	; 63
    1ef2:	8d 93       	st	X+, r24
    1ef4:	ed 93       	st	X+, r30
    1ef6:	fd 93       	st	X+, r31
    1ef8:	88 27       	eor	r24, r24
    1efa:	99 27       	eor	r25, r25
    1efc:	09 94       	ijmp

00001efe <longjmp>:
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	81 30       	cpi	r24, 0x01	; 1
    1f04:	91 05       	cpc	r25, r1
    1f06:	81 1d       	adc	r24, r1
    1f08:	2d 90       	ld	r2, X+
    1f0a:	3d 90       	ld	r3, X+
    1f0c:	4d 90       	ld	r4, X+
    1f0e:	5d 90       	ld	r5, X+
    1f10:	6d 90       	ld	r6, X+
    1f12:	7d 90       	ld	r7, X+
    1f14:	8d 90       	ld	r8, X+
    1f16:	9d 90       	ld	r9, X+
    1f18:	ad 90       	ld	r10, X+
    1f1a:	bd 90       	ld	r11, X+
    1f1c:	cd 90       	ld	r12, X+
    1f1e:	dd 90       	ld	r13, X+
    1f20:	ed 90       	ld	r14, X+
    1f22:	fd 90       	ld	r15, X+
    1f24:	0d 91       	ld	r16, X+
    1f26:	1d 91       	ld	r17, X+
    1f28:	cd 91       	ld	r28, X+
    1f2a:	dd 91       	ld	r29, X+
    1f2c:	ed 91       	ld	r30, X+
    1f2e:	fd 91       	ld	r31, X+
    1f30:	0d 90       	ld	r0, X+
    1f32:	f8 94       	cli
    1f34:	fe bf       	out	0x3e, r31	; 62
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	ed bf       	out	0x3d, r30	; 61
    1f3a:	ed 91       	ld	r30, X+
    1f3c:	fd 91       	ld	r31, X+
    1f3e:	09 94       	ijmp

00001f40 <_exit>:
    1f40:	f8 94       	cli

00001f42 <__stop_program>:
    1f42:	ff cf       	rjmp	.-2      	; 0x1f42 <__stop_program>
